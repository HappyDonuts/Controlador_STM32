
SECO-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002a6c  08002a6c  00012a6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002aec  08002aec  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          00002728  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002798  20002798  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001255f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020fc  00000000  00000000  000325ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006cc5  00000000  00000000  000346fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008d0  00000000  00000000  0003b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c78  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004dce  00000000  00000000  0003c908  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003811  00000000  00000000  000416d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00044ee7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001dc8  00000000  00000000  00044f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a54 	.word	0x08002a54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002a54 	.word	0x08002a54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <HAL_InitTick+0x3c>)
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <HAL_InitTick+0x40>)
{
 8000276:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000278:	7818      	ldrb	r0, [r3, #0]
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000282:	6810      	ldr	r0, [r2, #0]
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 f8a0 	bl	80003cc <HAL_SYSTICK_Config>
 800028c:	4604      	mov	r4, r0
 800028e:	b958      	cbnz	r0, 80002a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000290:	2d0f      	cmp	r5, #15
 8000292:	d809      	bhi.n	80002a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000294:	4602      	mov	r2, r0
 8000296:	4629      	mov	r1, r5
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 f856 	bl	800034c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <HAL_InitTick+0x44>)
 80002a2:	4620      	mov	r0, r4
 80002a4:	601d      	str	r5, [r3, #0]
 80002a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002a8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_Init+0x20>)
{
 80002ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002bc:	6813      	ldr	r3, [r2, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 f82f 	bl	8000328 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ffd0 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002d0:	f001 fe0c 	bl	8001eec <HAL_MspInit>
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <HAL_IncTick+0x10>)
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_IncTick+0x14>)
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	440b      	add	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20002620 	.word	0x20002620
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <HAL_GetTick+0x8>)
 80002f6:	6818      	ldr	r0, [r3, #0]
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20002620 	.word	0x20002620

08000300 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000300:	b538      	push	{r3, r4, r5, lr}
 8000302:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000304:	f7ff fff6 	bl	80002f4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000308:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800030a:	bf1c      	itt	ne
 800030c:	4b05      	ldrne	r3, [pc, #20]	; (8000324 <HAL_Delay+0x24>)
 800030e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000310:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000312:	bf18      	it	ne
 8000314:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000316:	f7ff ffed 	bl	80002f4 <HAL_GetTick>
 800031a:	1b40      	subs	r0, r0, r5
 800031c:	4284      	cmp	r4, r0
 800031e:	d8fa      	bhi.n	8000316 <HAL_Delay+0x16>
  {
  }
}
 8000320:	bd38      	pop	{r3, r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800032a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800032c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000330:	041b      	lsls	r3, r3, #16
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000338:	0200      	lsls	r0, r0, #8
 800033a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000342:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000344:	60d3      	str	r3, [r2, #12]
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034e:	b530      	push	{r4, r5, lr}
 8000350:	68dc      	ldr	r4, [r3, #12]
 8000352:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000356:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	2b04      	cmp	r3, #4
 800035e:	bf28      	it	cs
 8000360:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 0501 	mov.w	r5, #1
 8000368:	fa05 f303 	lsl.w	r3, r5, r3
 800036c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000370:	bf8c      	ite	hi
 8000372:	3c03      	subhi	r4, #3
 8000374:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000376:	4019      	ands	r1, r3
 8000378:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037a:	fa05 f404 	lsl.w	r4, r5, r4
 800037e:	3c01      	subs	r4, #1
 8000380:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000382:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	ea42 0201 	orr.w	r2, r2, r1
 8000388:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	bfaf      	iteee	ge
 800038e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	f000 000f 	andlt.w	r0, r0, #15
 8000396:	4b06      	ldrlt	r3, [pc, #24]	; (80003b0 <HAL_NVIC_SetPriority+0x64>)
 8000398:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	bfa5      	ittet	ge
 800039c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000ed14 	.word	0xe000ed14

080003b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003b4:	0942      	lsrs	r2, r0, #5
 80003b6:	2301      	movs	r3, #1
 80003b8:	f000 001f 	and.w	r0, r0, #31
 80003bc:	fa03 f000 	lsl.w	r0, r3, r0
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <HAL_NVIC_EnableIRQ+0x14>)
 80003c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003c6:	4770      	bx	lr
 80003c8:	e000e100 	.word	0xe000e100

080003cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	3801      	subs	r0, #1
 80003ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003d2:	d20a      	bcs.n	80003ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	21f0      	movs	r1, #240	; 0xf0
 80003dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003fc:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003fe:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000400:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000568 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000404:	4a56      	ldr	r2, [pc, #344]	; (8000560 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000406:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000408:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800040c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800040e:	9c01      	ldr	r4, [sp, #4]
 8000410:	40dc      	lsrs	r4, r3
 8000412:	d102      	bne.n	800041a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000414:	b005      	add	sp, #20
 8000416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800041a:	2401      	movs	r4, #1
 800041c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000420:	9c01      	ldr	r4, [sp, #4]
 8000422:	ea14 050a 	ands.w	r5, r4, sl
 8000426:	f000 8093 	beq.w	8000550 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800042a:	684c      	ldr	r4, [r1, #4]
 800042c:	f024 0b10 	bic.w	fp, r4, #16
 8000430:	f1bb 0f02 	cmp.w	fp, #2
 8000434:	d111      	bne.n	800045a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000436:	08df      	lsrs	r7, r3, #3
 8000438:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800043c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000440:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000442:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000446:	fa09 fc0e 	lsl.w	ip, r9, lr
 800044a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800044e:	690e      	ldr	r6, [r1, #16]
 8000450:	fa06 f60e 	lsl.w	r6, r6, lr
 8000454:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000458:	623e      	str	r6, [r7, #32]
 800045a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800045e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000460:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000462:	fa07 f70c 	lsl.w	r7, r7, ip
 8000466:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000468:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800046c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800046e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000472:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000476:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800047a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 800047e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000480:	d811      	bhi.n	80004a6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000482:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000484:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000488:	68ce      	ldr	r6, [r1, #12]
 800048a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800048e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000492:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000494:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000496:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800049a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800049e:	409e      	lsls	r6, r3
 80004a0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80004a4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80004a6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004a8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004aa:	688e      	ldr	r6, [r1, #8]
 80004ac:	fa06 f60c 	lsl.w	r6, r6, ip
 80004b0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004b2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80004b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004b6:	d54b      	bpl.n	8000550 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80004bc:	f046 0601 	orr.w	r6, r6, #1
 80004c0:	f8c8 6018 	str.w	r6, [r8, #24]
 80004c4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80004c8:	f023 0703 	bic.w	r7, r3, #3
 80004cc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80004d0:	f006 0601 	and.w	r6, r6, #1
 80004d4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80004d8:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004da:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80004e0:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004e2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80004e6:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80004ee:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004f2:	d02f      	beq.n	8000554 <HAL_GPIO_Init+0x15c>
 80004f4:	4e1b      	ldr	r6, [pc, #108]	; (8000564 <HAL_GPIO_Init+0x16c>)
 80004f6:	42b0      	cmp	r0, r6
 80004f8:	d02e      	beq.n	8000558 <HAL_GPIO_Init+0x160>
 80004fa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80004fe:	42b0      	cmp	r0, r6
 8000500:	d02c      	beq.n	800055c <HAL_GPIO_Init+0x164>
 8000502:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000506:	42b0      	cmp	r0, r6
 8000508:	bf14      	ite	ne
 800050a:	2605      	movne	r6, #5
 800050c:	2603      	moveq	r6, #3
 800050e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000512:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000516:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000518:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800051a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800051c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000520:	bf0c      	ite	eq
 8000522:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000524:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000526:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000528:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800052a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800052e:	bf0c      	ite	eq
 8000530:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000532:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000534:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000536:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000538:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800053c:	bf0c      	ite	eq
 800053e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000540:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000542:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000544:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000546:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000548:	bf54      	ite	pl
 800054a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800054c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800054e:	60d6      	str	r6, [r2, #12]
    position++;
 8000550:	3301      	adds	r3, #1
 8000552:	e75c      	b.n	800040e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000554:	2600      	movs	r6, #0
 8000556:	e7da      	b.n	800050e <HAL_GPIO_Init+0x116>
 8000558:	2601      	movs	r6, #1
 800055a:	e7d8      	b.n	800050e <HAL_GPIO_Init+0x116>
 800055c:	2602      	movs	r6, #2
 800055e:	e7d6      	b.n	800050e <HAL_GPIO_Init+0x116>
 8000560:	40010400 	.word	0x40010400
 8000564:	48000400 	.word	0x48000400
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800056c:	6903      	ldr	r3, [r0, #16]
 800056e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000570:	bf14      	ite	ne
 8000572:	2001      	movne	r0, #1
 8000574:	2000      	moveq	r0, #0
 8000576:	4770      	bx	lr

08000578 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000578:	4770      	bx	lr
	...

0800057c <HAL_GPIO_EXTI_IRQHandler>:
{
 800057c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800057e:	4b04      	ldr	r3, [pc, #16]	; (8000590 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000580:	6959      	ldr	r1, [r3, #20]
 8000582:	4201      	tst	r1, r0
 8000584:	d002      	beq.n	800058c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000586:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000588:	f7ff fff6 	bl	8000578 <HAL_GPIO_EXTI_Callback>
 800058c:	bd08      	pop	{r3, pc}
 800058e:	bf00      	nop
 8000590:	40010400 	.word	0x40010400

08000594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000594:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000598:	4605      	mov	r5, r0
 800059a:	b918      	cbnz	r0, 80005a4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800059c:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 800059e:	b002      	add	sp, #8
 80005a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005a4:	6803      	ldr	r3, [r0, #0]
 80005a6:	07da      	lsls	r2, r3, #31
 80005a8:	d411      	bmi.n	80005ce <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005aa:	682b      	ldr	r3, [r5, #0]
 80005ac:	079b      	lsls	r3, r3, #30
 80005ae:	f100 8085 	bmi.w	80006bc <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005b2:	682b      	ldr	r3, [r5, #0]
 80005b4:	071c      	lsls	r4, r3, #28
 80005b6:	f100 80f6 	bmi.w	80007a6 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005ba:	682b      	ldr	r3, [r5, #0]
 80005bc:	0758      	lsls	r0, r3, #29
 80005be:	f100 813f 	bmi.w	8000840 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005c2:	69ea      	ldr	r2, [r5, #28]
 80005c4:	2a00      	cmp	r2, #0
 80005c6:	f040 81d6 	bne.w	8000976 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80005ca:	2000      	movs	r0, #0
 80005cc:	e7e7      	b.n	800059e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ce:	4cba      	ldr	r4, [pc, #744]	; (80008b8 <HAL_RCC_OscConfig+0x324>)
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d007      	beq.n	80005ea <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	f003 030c 	and.w	r3, r3, #12
 80005e0:	2b08      	cmp	r3, #8
 80005e2:	d116      	bne.n	8000612 <HAL_RCC_OscConfig+0x7e>
 80005e4:	6863      	ldr	r3, [r4, #4]
 80005e6:	03df      	lsls	r7, r3, #15
 80005e8:	d513      	bpl.n	8000612 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005ee:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005f2:	6821      	ldr	r1, [r4, #0]
 80005f4:	fa93 f3a3 	rbit	r3, r3
 80005f8:	fab3 f383 	clz	r3, r3
 80005fc:	f003 031f 	and.w	r3, r3, #31
 8000600:	2201      	movs	r2, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	420b      	tst	r3, r1
 8000608:	d0cf      	beq.n	80005aa <HAL_RCC_OscConfig+0x16>
 800060a:	686b      	ldr	r3, [r5, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1cc      	bne.n	80005aa <HAL_RCC_OscConfig+0x16>
 8000610:	e7c4      	b.n	800059c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000612:	686a      	ldr	r2, [r5, #4]
 8000614:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000618:	d125      	bne.n	8000666 <HAL_RCC_OscConfig+0xd2>
 800061a:	6823      	ldr	r3, [r4, #0]
 800061c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000620:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000624:	68a9      	ldr	r1, [r5, #8]
 8000626:	f023 030f 	bic.w	r3, r3, #15
 800062a:	430b      	orrs	r3, r1
 800062c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800062e:	b352      	cbz	r2, 8000686 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000630:	f7ff fe60 	bl	80002f4 <HAL_GetTick>
 8000634:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000638:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800063a:	2701      	movs	r7, #1
 800063c:	fa96 f3a6 	rbit	r3, r6
 8000640:	6822      	ldr	r2, [r4, #0]
 8000642:	fa96 f3a6 	rbit	r3, r6
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	fa07 f303 	lsl.w	r3, r7, r3
 8000652:	4213      	tst	r3, r2
 8000654:	d1a9      	bne.n	80005aa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000656:	f7ff fe4d 	bl	80002f4 <HAL_GetTick>
 800065a:	eba0 0008 	sub.w	r0, r0, r8
 800065e:	2864      	cmp	r0, #100	; 0x64
 8000660:	d9ec      	bls.n	800063c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000662:	2003      	movs	r0, #3
 8000664:	e79b      	b.n	800059e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	b932      	cbnz	r2, 8000678 <HAL_RCC_OscConfig+0xe4>
 800066a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800066e:	6023      	str	r3, [r4, #0]
 8000670:	6823      	ldr	r3, [r4, #0]
 8000672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000676:	e7d3      	b.n	8000620 <HAL_RCC_OscConfig+0x8c>
 8000678:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800067c:	d1f5      	bne.n	800066a <HAL_RCC_OscConfig+0xd6>
 800067e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000682:	6023      	str	r3, [r4, #0]
 8000684:	e7c9      	b.n	800061a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000686:	f7ff fe35 	bl	80002f4 <HAL_GetTick>
 800068a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800068e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000690:	2701      	movs	r7, #1
 8000692:	fa96 f3a6 	rbit	r3, r6
 8000696:	6822      	ldr	r2, [r4, #0]
 8000698:	fa96 f3a6 	rbit	r3, r6
 800069c:	fab3 f383 	clz	r3, r3
 80006a0:	f003 031f 	and.w	r3, r3, #31
 80006a4:	fa07 f303 	lsl.w	r3, r7, r3
 80006a8:	4213      	tst	r3, r2
 80006aa:	f43f af7e 	beq.w	80005aa <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ae:	f7ff fe21 	bl	80002f4 <HAL_GetTick>
 80006b2:	eba0 0008 	sub.w	r0, r0, r8
 80006b6:	2864      	cmp	r0, #100	; 0x64
 80006b8:	d9eb      	bls.n	8000692 <HAL_RCC_OscConfig+0xfe>
 80006ba:	e7d2      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006bc:	4c7e      	ldr	r4, [pc, #504]	; (80008b8 <HAL_RCC_OscConfig+0x324>)
 80006be:	6863      	ldr	r3, [r4, #4]
 80006c0:	f013 0f0c 	tst.w	r3, #12
 80006c4:	d007      	beq.n	80006d6 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c6:	6863      	ldr	r3, [r4, #4]
 80006c8:	f003 030c 	and.w	r3, r3, #12
 80006cc:	2b08      	cmp	r3, #8
 80006ce:	d122      	bne.n	8000716 <HAL_RCC_OscConfig+0x182>
 80006d0:	6863      	ldr	r3, [r4, #4]
 80006d2:	03de      	lsls	r6, r3, #15
 80006d4:	d41f      	bmi.n	8000716 <HAL_RCC_OscConfig+0x182>
 80006d6:	2302      	movs	r3, #2
 80006d8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006dc:	6821      	ldr	r1, [r4, #0]
 80006de:	fa93 f3a3 	rbit	r3, r3
 80006e2:	fab3 f383 	clz	r3, r3
 80006e6:	f003 031f 	and.w	r3, r3, #31
 80006ea:	2201      	movs	r2, #1
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	420b      	tst	r3, r1
 80006f2:	d003      	beq.n	80006fc <HAL_RCC_OscConfig+0x168>
 80006f4:	692b      	ldr	r3, [r5, #16]
 80006f6:	4293      	cmp	r3, r2
 80006f8:	f47f af50 	bne.w	800059c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006fc:	6821      	ldr	r1, [r4, #0]
 80006fe:	23f8      	movs	r3, #248	; 0xf8
 8000700:	fa93 f3a3 	rbit	r3, r3
 8000704:	fab3 f283 	clz	r2, r3
 8000708:	696b      	ldr	r3, [r5, #20]
 800070a:	4093      	lsls	r3, r2
 800070c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000710:	4313      	orrs	r3, r2
 8000712:	6023      	str	r3, [r4, #0]
 8000714:	e74d      	b.n	80005b2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000716:	692a      	ldr	r2, [r5, #16]
 8000718:	2601      	movs	r6, #1
 800071a:	b30a      	cbz	r2, 8000760 <HAL_RCC_OscConfig+0x1cc>
 800071c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000728:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	2702      	movs	r7, #2
 8000730:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000732:	f7ff fddf 	bl	80002f4 <HAL_GetTick>
 8000736:	4680      	mov	r8, r0
 8000738:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800073c:	6822      	ldr	r2, [r4, #0]
 800073e:	fa97 f3a7 	rbit	r3, r7
 8000742:	fab3 f383 	clz	r3, r3
 8000746:	f003 031f 	and.w	r3, r3, #31
 800074a:	fa06 f303 	lsl.w	r3, r6, r3
 800074e:	4213      	tst	r3, r2
 8000750:	d1d4      	bne.n	80006fc <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000752:	f7ff fdcf 	bl	80002f4 <HAL_GetTick>
 8000756:	eba0 0008 	sub.w	r0, r0, r8
 800075a:	2802      	cmp	r0, #2
 800075c:	d9ec      	bls.n	8000738 <HAL_RCC_OscConfig+0x1a4>
 800075e:	e780      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
 8000760:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000764:	fab3 f383 	clz	r3, r3
 8000768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800076c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	2702      	movs	r7, #2
 8000774:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000776:	f7ff fdbd 	bl	80002f4 <HAL_GetTick>
 800077a:	4680      	mov	r8, r0
 800077c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000780:	6822      	ldr	r2, [r4, #0]
 8000782:	fa97 f3a7 	rbit	r3, r7
 8000786:	fab3 f383 	clz	r3, r3
 800078a:	f003 031f 	and.w	r3, r3, #31
 800078e:	fa06 f303 	lsl.w	r3, r6, r3
 8000792:	4213      	tst	r3, r2
 8000794:	f43f af0d 	beq.w	80005b2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000798:	f7ff fdac 	bl	80002f4 <HAL_GetTick>
 800079c:	eba0 0008 	sub.w	r0, r0, r8
 80007a0:	2802      	cmp	r0, #2
 80007a2:	d9eb      	bls.n	800077c <HAL_RCC_OscConfig+0x1e8>
 80007a4:	e75d      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007a6:	69aa      	ldr	r2, [r5, #24]
 80007a8:	4e43      	ldr	r6, [pc, #268]	; (80008b8 <HAL_RCC_OscConfig+0x324>)
 80007aa:	4944      	ldr	r1, [pc, #272]	; (80008bc <HAL_RCC_OscConfig+0x328>)
 80007ac:	2401      	movs	r4, #1
 80007ae:	b31a      	cbz	r2, 80007f8 <HAL_RCC_OscConfig+0x264>
 80007b0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80007b4:	fab3 f383 	clz	r3, r3
 80007b8:	440b      	add	r3, r1
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	2702      	movs	r7, #2
 80007be:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80007c0:	f7ff fd98 	bl	80002f4 <HAL_GetTick>
 80007c4:	4680      	mov	r8, r0
 80007c6:	fa97 f3a7 	rbit	r3, r7
 80007ca:	fa97 f3a7 	rbit	r3, r7
 80007ce:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007d2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007d4:	fa97 f3a7 	rbit	r3, r7
 80007d8:	fab3 f383 	clz	r3, r3
 80007dc:	f003 031f 	and.w	r3, r3, #31
 80007e0:	fa04 f303 	lsl.w	r3, r4, r3
 80007e4:	4213      	tst	r3, r2
 80007e6:	f47f aee8 	bne.w	80005ba <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007ea:	f7ff fd83 	bl	80002f4 <HAL_GetTick>
 80007ee:	eba0 0008 	sub.w	r0, r0, r8
 80007f2:	2802      	cmp	r0, #2
 80007f4:	d9e7      	bls.n	80007c6 <HAL_RCC_OscConfig+0x232>
 80007f6:	e734      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
 80007f8:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 80007fc:	fab3 f383 	clz	r3, r3
 8000800:	440b      	add	r3, r1
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	2702      	movs	r7, #2
 8000806:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000808:	f7ff fd74 	bl	80002f4 <HAL_GetTick>
 800080c:	4680      	mov	r8, r0
 800080e:	fa97 f3a7 	rbit	r3, r7
 8000812:	fa97 f3a7 	rbit	r3, r7
 8000816:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800081a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800081c:	fa97 f3a7 	rbit	r3, r7
 8000820:	fab3 f383 	clz	r3, r3
 8000824:	f003 031f 	and.w	r3, r3, #31
 8000828:	fa04 f303 	lsl.w	r3, r4, r3
 800082c:	4213      	tst	r3, r2
 800082e:	f43f aec4 	beq.w	80005ba <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000832:	f7ff fd5f 	bl	80002f4 <HAL_GetTick>
 8000836:	eba0 0008 	sub.w	r0, r0, r8
 800083a:	2802      	cmp	r0, #2
 800083c:	d9e7      	bls.n	800080e <HAL_RCC_OscConfig+0x27a>
 800083e:	e710      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000840:	4c1d      	ldr	r4, [pc, #116]	; (80008b8 <HAL_RCC_OscConfig+0x324>)
 8000842:	69e3      	ldr	r3, [r4, #28]
 8000844:	00d9      	lsls	r1, r3, #3
 8000846:	d434      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000848:	69e3      	ldr	r3, [r4, #28]
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	61e3      	str	r3, [r4, #28]
 8000850:	69e3      	ldr	r3, [r4, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800085a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800085c:	4f18      	ldr	r7, [pc, #96]	; (80008c0 <HAL_RCC_OscConfig+0x32c>)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	05da      	lsls	r2, r3, #23
 8000862:	d52f      	bpl.n	80008c4 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000864:	68eb      	ldr	r3, [r5, #12]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d13d      	bne.n	80008e6 <HAL_RCC_OscConfig+0x352>
 800086a:	6a23      	ldr	r3, [r4, #32]
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000872:	f7ff fd3f 	bl	80002f4 <HAL_GetTick>
 8000876:	2702      	movs	r7, #2
 8000878:	4682      	mov	sl, r0
 800087a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800087c:	f04f 0801 	mov.w	r8, #1
 8000880:	fa97 f3a7 	rbit	r3, r7
 8000884:	fa97 f3a7 	rbit	r3, r7
 8000888:	2b00      	cmp	r3, #0
 800088a:	d06c      	beq.n	8000966 <HAL_RCC_OscConfig+0x3d2>
 800088c:	6a22      	ldr	r2, [r4, #32]
 800088e:	fa99 f3a9 	rbit	r3, r9
 8000892:	fab3 f383 	clz	r3, r3
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	fa08 f303 	lsl.w	r3, r8, r3
 800089e:	4213      	tst	r3, r2
 80008a0:	d058      	beq.n	8000954 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f43f ae8d 	beq.w	80005c2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a8:	69e3      	ldr	r3, [r4, #28]
 80008aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008ae:	61e3      	str	r3, [r4, #28]
 80008b0:	e687      	b.n	80005c2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80008b2:	2600      	movs	r6, #0
 80008b4:	e7d2      	b.n	800085c <HAL_RCC_OscConfig+0x2c8>
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000
 80008bc:	10908120 	.word	0x10908120
 80008c0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80008cc:	f7ff fd12 	bl	80002f4 <HAL_GetTick>
 80008d0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	d4c5      	bmi.n	8000864 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008d8:	f7ff fd0c 	bl	80002f4 <HAL_GetTick>
 80008dc:	eba0 0008 	sub.w	r0, r0, r8
 80008e0:	2864      	cmp	r0, #100	; 0x64
 80008e2:	d9f6      	bls.n	80008d2 <HAL_RCC_OscConfig+0x33e>
 80008e4:	e6bd      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e6:	bb3b      	cbnz	r3, 8000938 <HAL_RCC_OscConfig+0x3a4>
 80008e8:	6a23      	ldr	r3, [r4, #32]
 80008ea:	f023 0301 	bic.w	r3, r3, #1
 80008ee:	6223      	str	r3, [r4, #32]
 80008f0:	6a23      	ldr	r3, [r4, #32]
 80008f2:	f023 0304 	bic.w	r3, r3, #4
 80008f6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008f8:	f7ff fcfc 	bl	80002f4 <HAL_GetTick>
 80008fc:	2702      	movs	r7, #2
 80008fe:	4682      	mov	sl, r0
 8000900:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000902:	f04f 0801 	mov.w	r8, #1
 8000906:	fa97 f3a7 	rbit	r3, r7
 800090a:	fa97 f3a7 	rbit	r3, r7
 800090e:	b373      	cbz	r3, 800096e <HAL_RCC_OscConfig+0x3da>
 8000910:	6a22      	ldr	r2, [r4, #32]
 8000912:	fa99 f3a9 	rbit	r3, r9
 8000916:	fab3 f383 	clz	r3, r3
 800091a:	f003 031f 	and.w	r3, r3, #31
 800091e:	fa08 f303 	lsl.w	r3, r8, r3
 8000922:	4213      	tst	r3, r2
 8000924:	d0bd      	beq.n	80008a2 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000926:	f7ff fce5 	bl	80002f4 <HAL_GetTick>
 800092a:	f241 3388 	movw	r3, #5000	; 0x1388
 800092e:	eba0 000a 	sub.w	r0, r0, sl
 8000932:	4298      	cmp	r0, r3
 8000934:	d9e7      	bls.n	8000906 <HAL_RCC_OscConfig+0x372>
 8000936:	e694      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000938:	2b05      	cmp	r3, #5
 800093a:	6a23      	ldr	r3, [r4, #32]
 800093c:	d103      	bne.n	8000946 <HAL_RCC_OscConfig+0x3b2>
 800093e:	f043 0304 	orr.w	r3, r3, #4
 8000942:	6223      	str	r3, [r4, #32]
 8000944:	e791      	b.n	800086a <HAL_RCC_OscConfig+0x2d6>
 8000946:	f023 0301 	bic.w	r3, r3, #1
 800094a:	6223      	str	r3, [r4, #32]
 800094c:	6a23      	ldr	r3, [r4, #32]
 800094e:	f023 0304 	bic.w	r3, r3, #4
 8000952:	e78d      	b.n	8000870 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000954:	f7ff fcce 	bl	80002f4 <HAL_GetTick>
 8000958:	f241 3388 	movw	r3, #5000	; 0x1388
 800095c:	eba0 000a 	sub.w	r0, r0, sl
 8000960:	4298      	cmp	r0, r3
 8000962:	d98d      	bls.n	8000880 <HAL_RCC_OscConfig+0x2ec>
 8000964:	e67d      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
 8000966:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800096a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800096c:	e78f      	b.n	800088e <HAL_RCC_OscConfig+0x2fa>
 800096e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000972:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000974:	e7cd      	b.n	8000912 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000976:	4c41      	ldr	r4, [pc, #260]	; (8000a7c <HAL_RCC_OscConfig+0x4e8>)
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	f003 030c 	and.w	r3, r3, #12
 800097e:	2b08      	cmp	r3, #8
 8000980:	f43f ae0c 	beq.w	800059c <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000984:	2a02      	cmp	r2, #2
 8000986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800098a:	d152      	bne.n	8000a32 <HAL_RCC_OscConfig+0x49e>
 800098c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000990:	fab3 f383 	clz	r3, r3
 8000994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009a2:	f7ff fca7 	bl	80002f4 <HAL_GetTick>
 80009a6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80009aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ac:	2601      	movs	r6, #1
 80009ae:	fa97 f3a7 	rbit	r3, r7
 80009b2:	6822      	ldr	r2, [r4, #0]
 80009b4:	fa97 f3a7 	rbit	r3, r7
 80009b8:	fab3 f383 	clz	r3, r3
 80009bc:	f003 031f 	and.w	r3, r3, #31
 80009c0:	fa06 f303 	lsl.w	r3, r6, r3
 80009c4:	4213      	tst	r3, r2
 80009c6:	d12d      	bne.n	8000a24 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009c8:	6862      	ldr	r2, [r4, #4]
 80009ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009cc:	6a29      	ldr	r1, [r5, #32]
 80009ce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009d2:	430b      	orrs	r3, r1
 80009d4:	4313      	orrs	r3, r2
 80009d6:	6063      	str	r3, [r4, #4]
 80009d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009dc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80009e0:	fab3 f383 	clz	r3, r3
 80009e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009f2:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc7e 	bl	80002f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009f8:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80009fa:	4607      	mov	r7, r0
 80009fc:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a00:	6822      	ldr	r2, [r4, #0]
 8000a02:	fa95 f3a5 	rbit	r3, r5
 8000a06:	fab3 f383 	clz	r3, r3
 8000a0a:	f003 031f 	and.w	r3, r3, #31
 8000a0e:	fa06 f303 	lsl.w	r3, r6, r3
 8000a12:	4213      	tst	r3, r2
 8000a14:	f47f add9 	bne.w	80005ca <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a18:	f7ff fc6c 	bl	80002f4 <HAL_GetTick>
 8000a1c:	1bc0      	subs	r0, r0, r7
 8000a1e:	2802      	cmp	r0, #2
 8000a20:	d9ec      	bls.n	80009fc <HAL_RCC_OscConfig+0x468>
 8000a22:	e61e      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a24:	f7ff fc66 	bl	80002f4 <HAL_GetTick>
 8000a28:	eba0 0008 	sub.w	r0, r0, r8
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d9be      	bls.n	80009ae <HAL_RCC_OscConfig+0x41a>
 8000a30:	e617      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
 8000a32:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a36:	fab3 f383 	clz	r3, r3
 8000a3a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a3e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fc54 	bl	80002f4 <HAL_GetTick>
 8000a4c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a52:	2601      	movs	r6, #1
 8000a54:	fa95 f3a5 	rbit	r3, r5
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	fa95 f3a5 	rbit	r3, r5
 8000a5e:	fab3 f383 	clz	r3, r3
 8000a62:	f003 031f 	and.w	r3, r3, #31
 8000a66:	fa06 f303 	lsl.w	r3, r6, r3
 8000a6a:	4213      	tst	r3, r2
 8000a6c:	f43f adad 	beq.w	80005ca <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a70:	f7ff fc40 	bl	80002f4 <HAL_GetTick>
 8000a74:	1bc0      	subs	r0, r0, r7
 8000a76:	2802      	cmp	r0, #2
 8000a78:	d9ec      	bls.n	8000a54 <HAL_RCC_OscConfig+0x4c0>
 8000a7a:	e5f2      	b.n	8000662 <HAL_RCC_OscConfig+0xce>
 8000a7c:	40021000 	.word	0x40021000

08000a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a80:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a82:	4c13      	ldr	r4, [pc, #76]	; (8000ad0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a84:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a86:	f001 030c 	and.w	r3, r1, #12
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d11e      	bne.n	8000acc <HAL_RCC_GetSysClockFreq+0x4c>
 8000a8e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a92:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a96:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000aa4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000aa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000aa8:	220f      	movs	r2, #15
 8000aaa:	fa92 f2a2 	rbit	r2, r2
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	40d3      	lsrs	r3, r2
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000aba:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000abc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000abe:	bf4a      	itet	mi
 8000ac0:	4b06      	ldrmi	r3, [pc, #24]	; (8000adc <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ac2:	4b07      	ldrpl	r3, [pc, #28]	; (8000ae0 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ac4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ac8:	4358      	muls	r0, r3
 8000aca:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ace:	bd10      	pop	{r4, pc}
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	08002a6c 	.word	0x08002a6c
 8000ad8:	08002a7c 	.word	0x08002a7c
 8000adc:	007a1200 	.word	0x007a1200
 8000ae0:	003d0900 	.word	0x003d0900

08000ae4 <HAL_RCC_ClockConfig>:
{
 8000ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000aea:	4604      	mov	r4, r0
 8000aec:	b910      	cbnz	r0, 8000af4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
 8000af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000af4:	4a4c      	ldr	r2, [pc, #304]	; (8000c28 <HAL_RCC_ClockConfig+0x144>)
 8000af6:	6813      	ldr	r3, [r2, #0]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	428b      	cmp	r3, r1
 8000afe:	d32e      	bcc.n	8000b5e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b00:	6822      	ldr	r2, [r4, #0]
 8000b02:	0791      	lsls	r1, r2, #30
 8000b04:	d436      	bmi.n	8000b74 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b06:	07d2      	lsls	r2, r2, #31
 8000b08:	d43c      	bmi.n	8000b84 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b0a:	4a47      	ldr	r2, [pc, #284]	; (8000c28 <HAL_RCC_ClockConfig+0x144>)
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	429d      	cmp	r5, r3
 8000b14:	d375      	bcc.n	8000c02 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b16:	6822      	ldr	r2, [r4, #0]
 8000b18:	4d44      	ldr	r5, [pc, #272]	; (8000c2c <HAL_RCC_ClockConfig+0x148>)
 8000b1a:	f012 0f04 	tst.w	r2, #4
 8000b1e:	d17c      	bne.n	8000c1a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b20:	0713      	lsls	r3, r2, #28
 8000b22:	d506      	bpl.n	8000b32 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b24:	686b      	ldr	r3, [r5, #4]
 8000b26:	6922      	ldr	r2, [r4, #16]
 8000b28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b30:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b32:	f7ff ffa5 	bl	8000a80 <HAL_RCC_GetSysClockFreq>
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	22f0      	movs	r2, #240	; 0xf0
 8000b3a:	fa92 f2a2 	rbit	r2, r2
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b46:	40d3      	lsrs	r3, r2
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <HAL_RCC_ClockConfig+0x14c>)
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	40d8      	lsrs	r0, r3
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <HAL_RCC_ClockConfig+0x150>)
 8000b50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fb8c 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b5e:	6813      	ldr	r3, [r2, #0]
 8000b60:	f023 0307 	bic.w	r3, r3, #7
 8000b64:	430b      	orrs	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b68:	6813      	ldr	r3, [r2, #0]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	d1bd      	bne.n	8000aee <HAL_RCC_ClockConfig+0xa>
 8000b72:	e7c5      	b.n	8000b00 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b74:	492d      	ldr	r1, [pc, #180]	; (8000c2c <HAL_RCC_ClockConfig+0x148>)
 8000b76:	68a0      	ldr	r0, [r4, #8]
 8000b78:	684b      	ldr	r3, [r1, #4]
 8000b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b7e:	4303      	orrs	r3, r0
 8000b80:	604b      	str	r3, [r1, #4]
 8000b82:	e7c0      	b.n	8000b06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b84:	6862      	ldr	r2, [r4, #4]
 8000b86:	4e29      	ldr	r6, [pc, #164]	; (8000c2c <HAL_RCC_ClockConfig+0x148>)
 8000b88:	2a01      	cmp	r2, #1
 8000b8a:	d127      	bne.n	8000bdc <HAL_RCC_ClockConfig+0xf8>
 8000b8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b90:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b94:	6831      	ldr	r1, [r6, #0]
 8000b96:	fa93 f3a3 	rbit	r3, r3
 8000b9a:	fab3 f383 	clz	r3, r3
 8000b9e:	f003 031f 	and.w	r3, r3, #31
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba8:	d0a1      	beq.n	8000aee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000baa:	6873      	ldr	r3, [r6, #4]
 8000bac:	f023 0303 	bic.w	r3, r3, #3
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000bb4:	f7ff fb9e 	bl	80002f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bb8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bbc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bbe:	6873      	ldr	r3, [r6, #4]
 8000bc0:	6862      	ldr	r2, [r4, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bca:	d09e      	beq.n	8000b0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bcc:	f7ff fb92 	bl	80002f4 <HAL_GetTick>
 8000bd0:	1bc0      	subs	r0, r0, r7
 8000bd2:	4540      	cmp	r0, r8
 8000bd4:	d9f3      	bls.n	8000bbe <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000bd6:	2003      	movs	r0, #3
}
 8000bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bdc:	2a02      	cmp	r2, #2
 8000bde:	bf0c      	ite	eq
 8000be0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000be4:	2302      	movne	r3, #2
 8000be6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bea:	6830      	ldr	r0, [r6, #0]
 8000bec:	fa93 f3a3 	rbit	r3, r3
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	f003 031f 	and.w	r3, r3, #31
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	4203      	tst	r3, r0
 8000c00:	e7d2      	b.n	8000ba8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	f023 0307 	bic.w	r3, r3, #7
 8000c08:	432b      	orrs	r3, r5
 8000c0a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c0c:	6813      	ldr	r3, [r2, #0]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	429d      	cmp	r5, r3
 8000c14:	f47f af6b 	bne.w	8000aee <HAL_RCC_ClockConfig+0xa>
 8000c18:	e77d      	b.n	8000b16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c1a:	686b      	ldr	r3, [r5, #4]
 8000c1c:	68e1      	ldr	r1, [r4, #12]
 8000c1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c22:	430b      	orrs	r3, r1
 8000c24:	606b      	str	r3, [r5, #4]
 8000c26:	e77b      	b.n	8000b20 <HAL_RCC_ClockConfig+0x3c>
 8000c28:	40022000 	.word	0x40022000
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	08002a9b 	.word	0x08002a9b
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c3a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	fa92 f2a2 	rbit	r2, r2
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c4c:	40d3      	lsrs	r3, r2
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000c50:	5cd3      	ldrb	r3, [r2, r3]
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000c54:	6810      	ldr	r0, [r2, #0]
}    
 8000c56:	40d8      	lsrs	r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	08002aab 	.word	0x08002aab
 8000c64:	20000008 	.word	0x20000008

08000c68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c6a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	fa92 f2a2 	rbit	r2, r2
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c7c:	40d3      	lsrs	r3, r2
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c84:	6810      	ldr	r0, [r2, #0]
} 
 8000c86:	40d8      	lsrs	r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	08002aab 	.word	0x08002aab
 8000c94:	20000008 	.word	0x20000008

08000c98 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c98:	6803      	ldr	r3, [r0, #0]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	f042 0201 	orr.w	r2, r2, #1
 8000ca0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	f042 0201 	orr.w	r2, r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000caa:	2000      	movs	r0, #0
 8000cac:	4770      	bx	lr

08000cae <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000cae:	6803      	ldr	r3, [r0, #0]
 8000cb0:	68da      	ldr	r2, [r3, #12]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000cb8:	6a19      	ldr	r1, [r3, #32]
 8000cba:	f241 1211 	movw	r2, #4369	; 0x1111
 8000cbe:	4211      	tst	r1, r2
 8000cc0:	d108      	bne.n	8000cd4 <HAL_TIM_Base_Stop_IT+0x26>
 8000cc2:	6a19      	ldr	r1, [r3, #32]
 8000cc4:	f240 4244 	movw	r2, #1092	; 0x444
 8000cc8:	4211      	tst	r1, r2
 8000cca:	bf02      	ittt	eq
 8000ccc:	681a      	ldreq	r2, [r3, #0]
 8000cce:	f022 0201 	biceq.w	r2, r2, #1
 8000cd2:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_TIM_PWM_MspInit>:
 8000cd8:	4770      	bx	lr

08000cda <HAL_TIM_PeriodElapsedCallback>:
 8000cda:	4770      	bx	lr

08000cdc <HAL_TIM_OC_DelayElapsedCallback>:
 8000cdc:	4770      	bx	lr

08000cde <HAL_TIM_IC_CaptureCallback>:
 8000cde:	4770      	bx	lr

08000ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_TIM_TriggerCallback>:
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	0791      	lsls	r1, r2, #30
{
 8000cea:	b510      	push	{r4, lr}
 8000cec:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cee:	d50f      	bpl.n	8000d10 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	0792      	lsls	r2, r2, #30
 8000cf4:	d50c      	bpl.n	8000d10 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000cf6:	f06f 0202 	mvn.w	r2, #2
 8000cfa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cfc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cfe:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d00:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d02:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d04:	f000 8085 	beq.w	8000e12 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d08:	f7ff ffe9 	bl	8000cde <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	0752      	lsls	r2, r2, #29
 8000d16:	d510      	bpl.n	8000d3a <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	0750      	lsls	r0, r2, #29
 8000d1c:	d50d      	bpl.n	8000d3a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000d1e:	f06f 0204 	mvn.w	r2, #4
 8000d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d24:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d26:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d28:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d2c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d2e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d30:	d075      	beq.n	8000e1e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d32:	f7ff ffd4 	bl	8000cde <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d36:	2300      	movs	r3, #0
 8000d38:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	691a      	ldr	r2, [r3, #16]
 8000d3e:	0711      	lsls	r1, r2, #28
 8000d40:	d50f      	bpl.n	8000d62 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	0712      	lsls	r2, r2, #28
 8000d46:	d50c      	bpl.n	8000d62 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000d48:	f06f 0208 	mvn.w	r2, #8
 8000d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d4e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d50:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d52:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d54:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d56:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d58:	d067      	beq.n	8000e2a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d5a:	f7ff ffc0 	bl	8000cde <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	06d0      	lsls	r0, r2, #27
 8000d68:	d510      	bpl.n	8000d8c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	06d1      	lsls	r1, r2, #27
 8000d6e:	d50d      	bpl.n	8000d8c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000d70:	f06f 0210 	mvn.w	r2, #16
 8000d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d76:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d78:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d7a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d7e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000d80:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d82:	d058      	beq.n	8000e36 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d84:	f7ff ffab 	bl	8000cde <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	691a      	ldr	r2, [r3, #16]
 8000d90:	07d2      	lsls	r2, r2, #31
 8000d92:	d508      	bpl.n	8000da6 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	07d0      	lsls	r0, r2, #31
 8000d98:	d505      	bpl.n	8000da6 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000d9a:	f06f 0201 	mvn.w	r2, #1
 8000d9e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff ff9a 	bl	8000cda <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	691a      	ldr	r2, [r3, #16]
 8000daa:	0611      	lsls	r1, r2, #24
 8000dac:	d508      	bpl.n	8000dc0 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000dae:	68da      	ldr	r2, [r3, #12]
 8000db0:	0612      	lsls	r2, r2, #24
 8000db2:	d505      	bpl.n	8000dc0 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000db8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000dba:	4620      	mov	r0, r4
 8000dbc:	f000 fbdf 	bl	800157e <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	05d0      	lsls	r0, r2, #23
 8000dc6:	d508      	bpl.n	8000dda <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	0611      	lsls	r1, r2, #24
 8000dcc:	d505      	bpl.n	8000dda <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000dce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000dd2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f000 fbd3 	bl	8001580 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	691a      	ldr	r2, [r3, #16]
 8000dde:	0652      	lsls	r2, r2, #25
 8000de0:	d508      	bpl.n	8000df4 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	0650      	lsls	r0, r2, #25
 8000de6:	d505      	bpl.n	8000df4 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000de8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000dec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff ff77 	bl	8000ce2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000df4:	6823      	ldr	r3, [r4, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	0691      	lsls	r1, r2, #26
 8000dfa:	d522      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	0692      	lsls	r2, r2, #26
 8000e00:	d51f      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000e02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000e08:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e0e:	f000 bbb5 	b.w	800157c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e12:	f7ff ff63 	bl	8000cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff ff62 	bl	8000ce0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e1c:	e776      	b.n	8000d0c <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e1e:	f7ff ff5d 	bl	8000cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e22:	4620      	mov	r0, r4
 8000e24:	f7ff ff5c 	bl	8000ce0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e28:	e785      	b.n	8000d36 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e2a:	f7ff ff57 	bl	8000cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f7ff ff56 	bl	8000ce0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e34:	e793      	b.n	8000d5e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e36:	f7ff ff51 	bl	8000cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff ff50 	bl	8000ce0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e40:	e7a2      	b.n	8000d88 <HAL_TIM_IRQHandler+0xa4>
 8000e42:	bd10      	pop	{r4, pc}

08000e44 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000e46:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e48:	4290      	cmp	r0, r2
{
 8000e4a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e4c:	d005      	beq.n	8000e5a <TIM_Base_SetConfig+0x16>
 8000e4e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e52:	d002      	beq.n	8000e5a <TIM_Base_SetConfig+0x16>
 8000e54:	4c1e      	ldr	r4, [pc, #120]	; (8000ed0 <TIM_Base_SetConfig+0x8c>)
 8000e56:	42a0      	cmp	r0, r4
 8000e58:	d10c      	bne.n	8000e74 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e5a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e60:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000e62:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e66:	d010      	beq.n	8000e8a <TIM_Base_SetConfig+0x46>
 8000e68:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e6c:	d00d      	beq.n	8000e8a <TIM_Base_SetConfig+0x46>
 8000e6e:	4a18      	ldr	r2, [pc, #96]	; (8000ed0 <TIM_Base_SetConfig+0x8c>)
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d00a      	beq.n	8000e8a <TIM_Base_SetConfig+0x46>
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <TIM_Base_SetConfig+0x90>)
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d007      	beq.n	8000e8a <TIM_Base_SetConfig+0x46>
 8000e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d003      	beq.n	8000e8a <TIM_Base_SetConfig+0x46>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d103      	bne.n	8000e92 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e8a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e90:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000e92:	694a      	ldr	r2, [r1, #20]
 8000e94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e98:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000e9a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e9c:	688b      	ldr	r3, [r1, #8]
 8000e9e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ea0:	680b      	ldr	r3, [r1, #0]
 8000ea2:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <TIM_Base_SetConfig+0x88>)
 8000ea6:	4298      	cmp	r0, r3
 8000ea8:	d00b      	beq.n	8000ec2 <TIM_Base_SetConfig+0x7e>
 8000eaa:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000eae:	4298      	cmp	r0, r3
 8000eb0:	d007      	beq.n	8000ec2 <TIM_Base_SetConfig+0x7e>
 8000eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d003      	beq.n	8000ec2 <TIM_Base_SetConfig+0x7e>
 8000eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d101      	bne.n	8000ec6 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ec2:	690b      	ldr	r3, [r1, #16]
 8000ec4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	6143      	str	r3, [r0, #20]
 8000eca:	bd10      	pop	{r4, pc}
 8000ecc:	40012c00 	.word	0x40012c00
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	40014000 	.word	0x40014000

08000ed8 <HAL_TIM_Base_Init>:
{ 
 8000ed8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	b1a0      	cbz	r0, 8000f08 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000ede:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ee2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee6:	b91b      	cbnz	r3, 8000ef0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ee8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000eec:	f001 f816 	bl	8001f1c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	1d21      	adds	r1, r4, #4
 8000efa:	f7ff ffa3 	bl	8000e44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f08:	2001      	movs	r0, #1
}
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <HAL_TIM_PWM_Init>:
{
 8000f0c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f0e:	4604      	mov	r4, r0
 8000f10:	b1a0      	cbz	r0, 8000f3c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f1a:	b91b      	cbnz	r3, 8000f24 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f1c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000f20:	f7ff feda 	bl	8000cd8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f2a:	6820      	ldr	r0, [r4, #0]
 8000f2c:	1d21      	adds	r1, r4, #4
 8000f2e:	f7ff ff89 	bl	8000e44 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f3c:	2001      	movs	r0, #1
}
 8000f3e:	bd10      	pop	{r4, pc}

08000f40 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f40:	6a03      	ldr	r3, [r0, #32]
 8000f42:	f023 0301 	bic.w	r3, r3, #1
 8000f46:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f48:	6a03      	ldr	r3, [r0, #32]
{
 8000f4a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000f4c:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000f4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000f52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f56:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f5a:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000f5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000f5e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000f62:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000f64:	4d17      	ldr	r5, [pc, #92]	; (8000fc4 <TIM_OC1_SetConfig+0x84>)
 8000f66:	42a8      	cmp	r0, r5
 8000f68:	d00b      	beq.n	8000f82 <TIM_OC1_SetConfig+0x42>
 8000f6a:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000f6e:	42a8      	cmp	r0, r5
 8000f70:	d007      	beq.n	8000f82 <TIM_OC1_SetConfig+0x42>
 8000f72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f76:	42a8      	cmp	r0, r5
 8000f78:	d003      	beq.n	8000f82 <TIM_OC1_SetConfig+0x42>
 8000f7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f7e:	42a8      	cmp	r0, r5
 8000f80:	d11a      	bne.n	8000fb8 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000f82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000f84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000f88:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f8a:	4d0e      	ldr	r5, [pc, #56]	; (8000fc4 <TIM_OC1_SetConfig+0x84>)
 8000f8c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000f8e:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f92:	d00b      	beq.n	8000fac <TIM_OC1_SetConfig+0x6c>
 8000f94:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	d007      	beq.n	8000fac <TIM_OC1_SetConfig+0x6c>
 8000f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa0:	42a8      	cmp	r0, r5
 8000fa2:	d003      	beq.n	8000fac <TIM_OC1_SetConfig+0x6c>
 8000fa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa8:	42a8      	cmp	r0, r5
 8000faa:	d105      	bne.n	8000fb8 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000fac:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000fb0:	698e      	ldr	r6, [r1, #24]
 8000fb2:	694c      	ldr	r4, [r1, #20]
 8000fb4:	4334      	orrs	r4, r6
 8000fb6:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fb8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000fba:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000fbc:	684a      	ldr	r2, [r1, #4]
 8000fbe:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000fc0:	6203      	str	r3, [r0, #32]
 8000fc2:	bd70      	pop	{r4, r5, r6, pc}
 8000fc4:	40012c00 	.word	0x40012c00

08000fc8 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fc8:	6a03      	ldr	r3, [r0, #32]
 8000fca:	f023 0310 	bic.w	r3, r3, #16
 8000fce:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fd0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000fd2:	6842      	ldr	r2, [r0, #4]
{
 8000fd4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000fd6:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fd8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000fda:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8000fde:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fe2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fe6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000fe8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000ff0:	4d10      	ldr	r5, [pc, #64]	; (8001034 <TIM_OC2_SetConfig+0x6c>)
 8000ff2:	42a8      	cmp	r0, r5
 8000ff4:	d10e      	bne.n	8001014 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ff6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ffc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001004:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001006:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001008:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800100c:	4335      	orrs	r5, r6
 800100e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8001012:	e009      	b.n	8001028 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001014:	4d08      	ldr	r5, [pc, #32]	; (8001038 <TIM_OC2_SetConfig+0x70>)
 8001016:	42a8      	cmp	r0, r5
 8001018:	d0f4      	beq.n	8001004 <TIM_OC2_SetConfig+0x3c>
 800101a:	4d08      	ldr	r5, [pc, #32]	; (800103c <TIM_OC2_SetConfig+0x74>)
 800101c:	42a8      	cmp	r0, r5
 800101e:	d0f1      	beq.n	8001004 <TIM_OC2_SetConfig+0x3c>
 8001020:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001024:	42a8      	cmp	r0, r5
 8001026:	d0ed      	beq.n	8001004 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001028:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800102a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800102c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800102e:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001030:	6203      	str	r3, [r0, #32]
}
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40014000 	.word	0x40014000
 800103c:	40014400 	.word	0x40014400

08001040 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001040:	6a03      	ldr	r3, [r0, #32]
 8001042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001046:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001048:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800104a:	6842      	ldr	r2, [r0, #4]
{
 800104c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800104e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001050:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001052:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001056:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800105a:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800105c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800105e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001062:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001066:	4d11      	ldr	r5, [pc, #68]	; (80010ac <TIM_OC3_SetConfig+0x6c>)
 8001068:	42a8      	cmp	r0, r5
 800106a:	d10e      	bne.n	800108a <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800106c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800106e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001072:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800107a:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800107c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800107e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001082:	4335      	orrs	r5, r6
 8001084:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8001088:	e009      	b.n	800109e <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800108a:	4d09      	ldr	r5, [pc, #36]	; (80010b0 <TIM_OC3_SetConfig+0x70>)
 800108c:	42a8      	cmp	r0, r5
 800108e:	d0f4      	beq.n	800107a <TIM_OC3_SetConfig+0x3a>
 8001090:	4d08      	ldr	r5, [pc, #32]	; (80010b4 <TIM_OC3_SetConfig+0x74>)
 8001092:	42a8      	cmp	r0, r5
 8001094:	d0f1      	beq.n	800107a <TIM_OC3_SetConfig+0x3a>
 8001096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800109a:	42a8      	cmp	r0, r5
 800109c:	d0ed      	beq.n	800107a <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800109e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80010a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80010a2:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80010a4:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80010a6:	6203      	str	r3, [r0, #32]
}
 80010a8:	bd70      	pop	{r4, r5, r6, pc}
 80010aa:	bf00      	nop
 80010ac:	40012c00 	.word	0x40012c00
 80010b0:	40014000 	.word	0x40014000
 80010b4:	40014400 	.word	0x40014400

080010b8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80010b8:	6a03      	ldr	r3, [r0, #32]
 80010ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010be:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010c0:	6a02      	ldr	r2, [r0, #32]
{
 80010c2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80010c4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010c6:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80010ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010ce:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80010d6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80010d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80010dc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80010e0:	4d0c      	ldr	r5, [pc, #48]	; (8001114 <TIM_OC4_SetConfig+0x5c>)
 80010e2:	42a8      	cmp	r0, r5
 80010e4:	d00b      	beq.n	80010fe <TIM_OC4_SetConfig+0x46>
 80010e6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80010ea:	42a8      	cmp	r0, r5
 80010ec:	d007      	beq.n	80010fe <TIM_OC4_SetConfig+0x46>
 80010ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010f2:	42a8      	cmp	r0, r5
 80010f4:	d003      	beq.n	80010fe <TIM_OC4_SetConfig+0x46>
 80010f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010fa:	42a8      	cmp	r0, r5
 80010fc:	d104      	bne.n	8001108 <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80010fe:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001100:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001104:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001108:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800110a:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800110c:	684b      	ldr	r3, [r1, #4]
 800110e:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001110:	6202      	str	r2, [r0, #32]
 8001112:	bd30      	pop	{r4, r5, pc}
 8001114:	40012c00 	.word	0x40012c00

08001118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001118:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800111a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800111c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800111e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001122:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001126:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001128:	6083      	str	r3, [r0, #8]
 800112a:	bd10      	pop	{r4, pc}

0800112c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800112c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001130:	2b01      	cmp	r3, #1
{
 8001132:	b570      	push	{r4, r5, r6, lr}
 8001134:	4604      	mov	r4, r0
 8001136:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800113a:	d01a      	beq.n	8001172 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800113c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001140:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001142:	2301      	movs	r3, #1
 8001144:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001148:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <HAL_TIM_ConfigClockSource+0x168>)
 800114c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800114e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001150:	680b      	ldr	r3, [r1, #0]
 8001152:	2b40      	cmp	r3, #64	; 0x40
 8001154:	d075      	beq.n	8001242 <HAL_TIM_ConfigClockSource+0x116>
 8001156:	d818      	bhi.n	800118a <HAL_TIM_ConfigClockSource+0x5e>
 8001158:	2b10      	cmp	r3, #16
 800115a:	f000 808f 	beq.w	800127c <HAL_TIM_ConfigClockSource+0x150>
 800115e:	d809      	bhi.n	8001174 <HAL_TIM_ConfigClockSource+0x48>
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8085 	beq.w	8001270 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001166:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001168:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800116a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800116e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001172:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001174:	2b20      	cmp	r3, #32
 8001176:	f000 8087 	beq.w	8001288 <HAL_TIM_ConfigClockSource+0x15c>
 800117a:	2b30      	cmp	r3, #48	; 0x30
 800117c:	d1f3      	bne.n	8001166 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800117e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001184:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001188:	e033      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800118a:	2b70      	cmp	r3, #112	; 0x70
 800118c:	d033      	beq.n	80011f6 <HAL_TIM_ConfigClockSource+0xca>
 800118e:	d81b      	bhi.n	80011c8 <HAL_TIM_ConfigClockSource+0x9c>
 8001190:	2b50      	cmp	r3, #80	; 0x50
 8001192:	d03f      	beq.n	8001214 <HAL_TIM_ConfigClockSource+0xe8>
 8001194:	2b60      	cmp	r3, #96	; 0x60
 8001196:	d1e6      	bne.n	8001166 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001198:	684d      	ldr	r5, [r1, #4]
 800119a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800119c:	6a01      	ldr	r1, [r0, #32]
 800119e:	f021 0110 	bic.w	r1, r1, #16
 80011a2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011a4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80011a6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80011a8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80011ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80011b0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80011b4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80011b8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80011ba:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80011bc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011c2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80011c6:	e014      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80011c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011cc:	d00c      	beq.n	80011e8 <HAL_TIM_ConfigClockSource+0xbc>
 80011ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d2:	d1c8      	bne.n	8001166 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80011d4:	68cb      	ldr	r3, [r1, #12]
 80011d6:	684a      	ldr	r2, [r1, #4]
 80011d8:	6889      	ldr	r1, [r1, #8]
 80011da:	f7ff ff9d 	bl	8001118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011de:	6822      	ldr	r2, [r4, #0]
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e6:	e013      	b.n	8001210 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80011e8:	6883      	ldr	r3, [r0, #8]
 80011ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ee:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80011f2:	6083      	str	r3, [r0, #8]
 80011f4:	e7b7      	b.n	8001166 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80011f6:	68cb      	ldr	r3, [r1, #12]
 80011f8:	684a      	ldr	r2, [r1, #4]
 80011fa:	6889      	ldr	r1, [r1, #8]
 80011fc:	f7ff ff8c 	bl	8001118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001200:	6822      	ldr	r2, [r4, #0]
 8001202:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800120c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001210:	6093      	str	r3, [r2, #8]
    break;
 8001212:	e7a8      	b.n	8001166 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001214:	684a      	ldr	r2, [r1, #4]
 8001216:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001218:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800121a:	6a05      	ldr	r5, [r0, #32]
 800121c:	f025 0501 	bic.w	r5, r5, #1
 8001220:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001222:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001224:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800122c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001230:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001232:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001234:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001236:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800123c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001240:	e7d7      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001242:	684a      	ldr	r2, [r1, #4]
 8001244:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001246:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001248:	6a05      	ldr	r5, [r0, #32]
 800124a:	f025 0501 	bic.w	r5, r5, #1
 800124e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001250:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001252:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800125a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800125e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001260:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001262:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001264:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800126a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800126e:	e7c0      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001270:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001276:	f043 0307 	orr.w	r3, r3, #7
 800127a:	e7ba      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800127c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800127e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001282:	f043 0317 	orr.w	r3, r3, #23
 8001286:	e7b4      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001288:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800128a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800128e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001292:	e7ae      	b.n	80011f2 <HAL_TIM_ConfigClockSource+0xc6>
 8001294:	fffe0088 	.word	0xfffe0088

08001298 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001298:	6a03      	ldr	r3, [r0, #32]
{
 800129a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800129c:	2401      	movs	r4, #1
 800129e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80012a0:	ea23 0304 	bic.w	r3, r3, r4
 80012a4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80012a6:	6a03      	ldr	r3, [r0, #32]
 80012a8:	408a      	lsls	r2, r1
 80012aa:	431a      	orrs	r2, r3
 80012ac:	6202      	str	r2, [r0, #32]
 80012ae:	bd10      	pop	{r4, pc}

080012b0 <HAL_TIM_PWM_Start>:
{
 80012b0:	b510      	push	{r4, lr}
 80012b2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6800      	ldr	r0, [r0, #0]
 80012b8:	f7ff ffee 	bl	8001298 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_TIM_PWM_Start+0x40>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d00b      	beq.n	80012dc <HAL_TIM_PWM_Start+0x2c>
 80012c4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d007      	beq.n	80012dc <HAL_TIM_PWM_Start+0x2c>
 80012cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d003      	beq.n	80012dc <HAL_TIM_PWM_Start+0x2c>
 80012d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012d8:	4293      	cmp	r3, r2
 80012da:	d103      	bne.n	80012e4 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 80012dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012e2:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f042 0201 	orr.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
} 
 80012ec:	2000      	movs	r0, #0
 80012ee:	bd10      	pop	{r4, pc}
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <HAL_TIM_PWM_Stop>:
{   
 80012f4:	b510      	push	{r4, lr}
 80012f6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6800      	ldr	r0, [r0, #0]
 80012fc:	f7ff ffcc 	bl	8001298 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <HAL_TIM_PWM_Stop+0x70>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00b      	beq.n	8001320 <HAL_TIM_PWM_Stop+0x2c>
 8001308:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <HAL_TIM_PWM_Stop+0x2c>
 8001310:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001314:	4293      	cmp	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_TIM_PWM_Stop+0x2c>
 8001318:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800131c:	4293      	cmp	r3, r2
 800131e:	d10d      	bne.n	800133c <HAL_TIM_PWM_Stop+0x48>
    __HAL_TIM_MOE_DISABLE(htim);
 8001320:	6a19      	ldr	r1, [r3, #32]
 8001322:	f241 1211 	movw	r2, #4369	; 0x1111
 8001326:	4211      	tst	r1, r2
 8001328:	d108      	bne.n	800133c <HAL_TIM_PWM_Stop+0x48>
 800132a:	6a19      	ldr	r1, [r3, #32]
 800132c:	f240 4244 	movw	r2, #1092	; 0x444
 8001330:	4211      	tst	r1, r2
 8001332:	bf02      	ittt	eq
 8001334:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001336:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800133a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800133c:	6a19      	ldr	r1, [r3, #32]
 800133e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001342:	4211      	tst	r1, r2
 8001344:	d108      	bne.n	8001358 <HAL_TIM_PWM_Stop+0x64>
 8001346:	6a19      	ldr	r1, [r3, #32]
 8001348:	f240 4244 	movw	r2, #1092	; 0x444
 800134c:	4211      	tst	r1, r2
 800134e:	d103      	bne.n	8001358 <HAL_TIM_PWM_Stop+0x64>
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001358:	2301      	movs	r3, #1
 800135a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
} 
 800135e:	2000      	movs	r0, #0
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	40012c00 	.word	0x40012c00

08001368 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001368:	6a03      	ldr	r3, [r0, #32]
 800136a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001370:	6a02      	ldr	r2, [r0, #32]
{
 8001372:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001374:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001376:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001378:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800137a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8001382:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001384:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8001386:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800138a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800138e:	4d0d      	ldr	r5, [pc, #52]	; (80013c4 <TIM_OC5_SetConfig+0x5c>)
 8001390:	42a8      	cmp	r0, r5
 8001392:	d00b      	beq.n	80013ac <TIM_OC5_SetConfig+0x44>
 8001394:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001398:	42a8      	cmp	r0, r5
 800139a:	d007      	beq.n	80013ac <TIM_OC5_SetConfig+0x44>
 800139c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d003      	beq.n	80013ac <TIM_OC5_SetConfig+0x44>
 80013a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a8:	42a8      	cmp	r0, r5
 80013aa:	d104      	bne.n	80013b6 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80013ac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80013ae:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80013b2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013b6:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80013b8:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80013ba:	684b      	ldr	r3, [r1, #4]
 80013bc:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80013be:	6202      	str	r2, [r0, #32]
 80013c0:	bd30      	pop	{r4, r5, pc}
 80013c2:	bf00      	nop
 80013c4:	40012c00 	.word	0x40012c00

080013c8 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80013c8:	6a03      	ldr	r3, [r0, #32]
 80013ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013ce:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013d0:	6a02      	ldr	r2, [r0, #32]
{
 80013d2:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80013d4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80013d6:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80013da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80013e6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80013e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80013ec:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80013f0:	4d0c      	ldr	r5, [pc, #48]	; (8001424 <TIM_OC6_SetConfig+0x5c>)
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d00b      	beq.n	800140e <TIM_OC6_SetConfig+0x46>
 80013f6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80013fa:	42a8      	cmp	r0, r5
 80013fc:	d007      	beq.n	800140e <TIM_OC6_SetConfig+0x46>
 80013fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001402:	42a8      	cmp	r0, r5
 8001404:	d003      	beq.n	800140e <TIM_OC6_SetConfig+0x46>
 8001406:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140a:	42a8      	cmp	r0, r5
 800140c:	d104      	bne.n	8001418 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800140e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001410:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001414:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001418:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800141a:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800141c:	684b      	ldr	r3, [r1, #4]
 800141e:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001420:	6202      	str	r2, [r0, #32]
 8001422:	bd30      	pop	{r4, r5, pc}
 8001424:	40012c00 	.word	0x40012c00

08001428 <HAL_TIM_PWM_ConfigChannel>:
{
 8001428:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800142a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800142e:	2b01      	cmp	r3, #1
{
 8001430:	4604      	mov	r4, r0
 8001432:	460d      	mov	r5, r1
 8001434:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001438:	d010      	beq.n	800145c <HAL_TIM_PWM_ConfigChannel+0x34>
 800143a:	2301      	movs	r3, #1
  switch (Channel)
 800143c:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800143e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001442:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8001446:	d043      	beq.n	80014d0 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8001448:	d809      	bhi.n	800145e <HAL_TIM_PWM_ConfigChannel+0x36>
 800144a:	b1fa      	cbz	r2, 800148c <HAL_TIM_PWM_ConfigChannel+0x64>
 800144c:	2a04      	cmp	r2, #4
 800144e:	d02e      	beq.n	80014ae <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8001450:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001452:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001454:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001458:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800145c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800145e:	2a10      	cmp	r2, #16
 8001460:	d047      	beq.n	80014f2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8001462:	2a14      	cmp	r2, #20
 8001464:	d056      	beq.n	8001514 <HAL_TIM_PWM_ConfigChannel+0xec>
 8001466:	2a0c      	cmp	r2, #12
 8001468:	d1f2      	bne.n	8001450 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f7ff fe24 	bl	80010b8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001470:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001472:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800147a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800147c:	69da      	ldr	r2, [r3, #28]
 800147e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001482:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800148a:	e030      	b.n	80014ee <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800148c:	6820      	ldr	r0, [r4, #0]
 800148e:	f7ff fd57 	bl	8000f40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001492:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001494:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001496:	699a      	ldr	r2, [r3, #24]
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800149e:	699a      	ldr	r2, [r3, #24]
 80014a0:	f022 0204 	bic.w	r2, r2, #4
 80014a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014aa:	619a      	str	r2, [r3, #24]
    break;
 80014ac:	e7d0      	b.n	8001450 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80014ae:	6820      	ldr	r0, [r4, #0]
 80014b0:	f7ff fd8a 	bl	8000fc8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014b6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014ce:	e7ec      	b.n	80014aa <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80014d0:	6820      	ldr	r0, [r4, #0]
 80014d2:	f7ff fdb5 	bl	8001040 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80014d8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80014da:	69da      	ldr	r2, [r3, #28]
 80014dc:	f042 0208 	orr.w	r2, r2, #8
 80014e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	f022 0204 	bic.w	r2, r2, #4
 80014e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80014ee:	61da      	str	r2, [r3, #28]
    break;
 80014f0:	e7ae      	b.n	8001450 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	f7ff ff38 	bl	8001368 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80014f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80014fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80014fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001506:	f022 0204 	bic.w	r2, r2, #4
 800150a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800150c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800150e:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 8001512:	e79d      	b.n	8001450 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001514:	6820      	ldr	r0, [r4, #0]
 8001516:	f7ff ff57 	bl	80013c8 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800151a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800151c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800151e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001524:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001526:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001528:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800152e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001530:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001534:	e7ec      	b.n	8001510 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

08001538 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8001538:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800153c:	2b01      	cmp	r3, #1
{
 800153e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001540:	d018      	beq.n	8001574 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8001542:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001544:	4d0c      	ldr	r5, [pc, #48]	; (8001578 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001546:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001548:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800154a:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800154c:	bf02      	ittt	eq
 800154e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001550:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001554:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001556:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001558:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800155a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800155e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001560:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8001564:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001566:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8001568:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800156a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800156c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001570:	4618      	mov	r0, r3
 8001572:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001574:	2002      	movs	r0, #2
} 
 8001576:	bd30      	pop	{r4, r5, pc}
 8001578:	40012c00 	.word	0x40012c00

0800157c <HAL_TIMEx_CommutationCallback>:
 800157c:	4770      	bx	lr

0800157e <HAL_TIMEx_BreakCallback>:
 800157e:	4770      	bx	lr

08001580 <HAL_TIMEx_Break2Callback>:
{
 8001580:	4770      	bx	lr
	...

08001584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001588:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800158a:	6921      	ldr	r1, [r4, #16]
 800158c:	68a3      	ldr	r3, [r4, #8]
 800158e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001590:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001592:	430b      	orrs	r3, r1
 8001594:	6961      	ldr	r1, [r4, #20]
 8001596:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001598:	4949      	ldr	r1, [pc, #292]	; (80016c0 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800159a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800159c:	4001      	ands	r1, r0
 800159e:	430b      	orrs	r3, r1
 80015a0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015a2:	686b      	ldr	r3, [r5, #4]
 80015a4:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015a6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015ac:	430b      	orrs	r3, r1
 80015ae:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015b0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015b2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015b4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015b8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015ba:	430b      	orrs	r3, r1
 80015bc:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <UART_SetConfig+0x140>)
 80015c0:	429d      	cmp	r5, r3
 80015c2:	d112      	bne.n	80015ea <UART_SetConfig+0x66>
 80015c4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80015c8:	493f      	ldr	r1, [pc, #252]	; (80016c8 <UART_SetConfig+0x144>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015d0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	d13b      	bne.n	8001650 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d836      	bhi.n	800164a <UART_SetConfig+0xc6>
 80015dc:	e8df f003 	tbb	[pc, r3]
 80015e0:	3524210f 	.word	0x3524210f
 80015e4:	3535352d 	.word	0x3535352d
 80015e8:	30          	.byte	0x30
 80015e9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <UART_SetConfig+0x148>)
 80015ec:	429d      	cmp	r5, r3
 80015ee:	d003      	beq.n	80015f8 <UART_SetConfig+0x74>
 80015f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f4:	429d      	cmp	r5, r3
 80015f6:	d15e      	bne.n	80016b6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015fc:	d131      	bne.n	8001662 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80015fe:	f7ff fb1b 	bl	8000c38 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001602:	6861      	ldr	r1, [r4, #4]
 8001604:	084a      	lsrs	r2, r1, #1
 8001606:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800160a:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800160e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001610:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001612:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001616:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001618:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800161c:	4313      	orrs	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
 8001620:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001622:	f7ff fb21 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
 8001626:	e7ec      	b.n	8001602 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001628:	6860      	ldr	r0, [r4, #4]
 800162a:	0843      	lsrs	r3, r0, #1
 800162c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001630:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001634:	fbb3 f3f0 	udiv	r3, r3, r0
 8001638:	e7e9      	b.n	800160e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800163a:	f7ff fa21 	bl	8000a80 <HAL_RCC_GetSysClockFreq>
 800163e:	e7e0      	b.n	8001602 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001640:	6860      	ldr	r0, [r4, #4]
 8001642:	0843      	lsrs	r3, r0, #1
 8001644:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001648:	e7f4      	b.n	8001634 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 800164a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800164c:	2300      	movs	r3, #0
 800164e:	e7e0      	b.n	8001612 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001650:	2b08      	cmp	r3, #8
 8001652:	d833      	bhi.n	80016bc <UART_SetConfig+0x138>
 8001654:	e8df f003 	tbb	[pc, r3]
 8001658:	321b1005 	.word	0x321b1005
 800165c:	32323227 	.word	0x32323227
 8001660:	2a          	.byte	0x2a
 8001661:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001662:	f7ff fae9 	bl	8000c38 <HAL_RCC_GetPCLK1Freq>
 8001666:	6863      	ldr	r3, [r4, #4]
 8001668:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800166c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001670:	b280      	uxth	r0, r0
 8001672:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001674:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001676:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001678:	f7ff faf6 	bl	8000c68 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800167c:	6863      	ldr	r3, [r4, #4]
 800167e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001682:	fbb0 f0f3 	udiv	r0, r0, r3
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <UART_SetConfig+0x140>)
 8001688:	b280      	uxth	r0, r0
 800168a:	60d8      	str	r0, [r3, #12]
 800168c:	e7f2      	b.n	8001674 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800168e:	6862      	ldr	r2, [r4, #4]
 8001690:	0853      	lsrs	r3, r2, #1
 8001692:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001696:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800169a:	fbb3 f3f2 	udiv	r3, r3, r2
 800169e:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <UART_SetConfig+0x140>)
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	60d3      	str	r3, [r2, #12]
 80016a4:	e7e6      	b.n	8001674 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016a6:	f7ff f9eb 	bl	8000a80 <HAL_RCC_GetSysClockFreq>
 80016aa:	e7e7      	b.n	800167c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016ac:	6862      	ldr	r2, [r4, #4]
 80016ae:	0853      	lsrs	r3, r2, #1
 80016b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016b4:	e7f1      	b.n	800169a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80016ba:	d0c6      	beq.n	800164a <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80016bc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	efff69f3 	.word	0xefff69f3
 80016c4:	40013800 	.word	0x40013800
 80016c8:	08002a8c 	.word	0x08002a8c
 80016cc:	40004400 	.word	0x40004400

080016d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016d2:	07da      	lsls	r2, r3, #31
{
 80016d4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016d6:	d506      	bpl.n	80016e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80016d8:	6801      	ldr	r1, [r0, #0]
 80016da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80016dc:	684a      	ldr	r2, [r1, #4]
 80016de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80016e2:	4322      	orrs	r2, r4
 80016e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80016e6:	079c      	lsls	r4, r3, #30
 80016e8:	d506      	bpl.n	80016f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80016ea:	6801      	ldr	r1, [r0, #0]
 80016ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80016ee:	684a      	ldr	r2, [r1, #4]
 80016f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016f4:	4322      	orrs	r2, r4
 80016f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80016f8:	0759      	lsls	r1, r3, #29
 80016fa:	d506      	bpl.n	800170a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80016fc:	6801      	ldr	r1, [r0, #0]
 80016fe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001700:	684a      	ldr	r2, [r1, #4]
 8001702:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001706:	4322      	orrs	r2, r4
 8001708:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800170a:	071a      	lsls	r2, r3, #28
 800170c:	d506      	bpl.n	800171c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800170e:	6801      	ldr	r1, [r0, #0]
 8001710:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001712:	684a      	ldr	r2, [r1, #4]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001718:	4322      	orrs	r2, r4
 800171a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800171c:	06dc      	lsls	r4, r3, #27
 800171e:	d506      	bpl.n	800172e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001720:	6801      	ldr	r1, [r0, #0]
 8001722:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001724:	688a      	ldr	r2, [r1, #8]
 8001726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800172a:	4322      	orrs	r2, r4
 800172c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800172e:	0699      	lsls	r1, r3, #26
 8001730:	d506      	bpl.n	8001740 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001732:	6801      	ldr	r1, [r0, #0]
 8001734:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001736:	688a      	ldr	r2, [r1, #8]
 8001738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800173c:	4322      	orrs	r2, r4
 800173e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001740:	065a      	lsls	r2, r3, #25
 8001742:	d50f      	bpl.n	8001764 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001744:	6801      	ldr	r1, [r0, #0]
 8001746:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001748:	684a      	ldr	r2, [r1, #4]
 800174a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800174e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001750:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001754:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001756:	d105      	bne.n	8001764 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001758:	684a      	ldr	r2, [r1, #4]
 800175a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800175c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001760:	4322      	orrs	r2, r4
 8001762:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	d506      	bpl.n	8001776 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800176c:	6853      	ldr	r3, [r2, #4]
 800176e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001772:	430b      	orrs	r3, r1
 8001774:	6053      	str	r3, [r2, #4]
 8001776:	bd10      	pop	{r4, pc}

08001778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800177c:	9d06      	ldr	r5, [sp, #24]
 800177e:	4604      	mov	r4, r0
 8001780:	460f      	mov	r7, r1
 8001782:	4616      	mov	r6, r2
 8001784:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001786:	6821      	ldr	r1, [r4, #0]
 8001788:	69ca      	ldr	r2, [r1, #28]
 800178a:	ea37 0302 	bics.w	r3, r7, r2
 800178e:	bf0c      	ite	eq
 8001790:	2201      	moveq	r2, #1
 8001792:	2200      	movne	r2, #0
 8001794:	42b2      	cmp	r2, r6
 8001796:	d002      	beq.n	800179e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001798:	2000      	movs	r0, #0
}
 800179a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800179e:	1c6b      	adds	r3, r5, #1
 80017a0:	d0f2      	beq.n	8001788 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017a2:	b99d      	cbnz	r5, 80017cc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	f022 0201 	bic.w	r2, r2, #1
 80017b4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80017b6:	2320      	movs	r3, #32
 80017b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80017bc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80017c0:	2300      	movs	r3, #0
 80017c2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80017c6:	2003      	movs	r0, #3
 80017c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017cc:	f7fe fd92 	bl	80002f4 <HAL_GetTick>
 80017d0:	eba0 0008 	sub.w	r0, r0, r8
 80017d4:	4285      	cmp	r5, r0
 80017d6:	d2d6      	bcs.n	8001786 <UART_WaitOnFlagUntilTimeout+0xe>
 80017d8:	e7e4      	b.n	80017a4 <UART_WaitOnFlagUntilTimeout+0x2c>

080017da <HAL_UART_Transmit>:
{
 80017da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80017de:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80017e0:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80017e4:	2b20      	cmp	r3, #32
{
 80017e6:	4604      	mov	r4, r0
 80017e8:	460d      	mov	r5, r1
 80017ea:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80017ec:	d14c      	bne.n	8001888 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80017ee:	2900      	cmp	r1, #0
 80017f0:	d048      	beq.n	8001884 <HAL_UART_Transmit+0xaa>
 80017f2:	2a00      	cmp	r2, #0
 80017f4:	d046      	beq.n	8001884 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80017f6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d044      	beq.n	8001888 <HAL_UART_Transmit+0xae>
 80017fe:	2301      	movs	r3, #1
 8001800:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001808:	2321      	movs	r3, #33	; 0x21
 800180a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800180e:	f7fe fd71 	bl	80002f4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001812:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8001816:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001818:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800181c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001820:	b292      	uxth	r2, r2
 8001822:	b962      	cbnz	r2, 800183e <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001824:	9700      	str	r7, [sp, #0]
 8001826:	4633      	mov	r3, r6
 8001828:	2140      	movs	r1, #64	; 0x40
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff ffa4 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 8001830:	b998      	cbnz	r0, 800185a <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001832:	2320      	movs	r3, #32
 8001834:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001838:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 800183c:	e00e      	b.n	800185c <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 800183e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001842:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001844:	3b01      	subs	r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800184c:	2200      	movs	r2, #0
 800184e:	4633      	mov	r3, r6
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ff90 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 8001858:	b118      	cbz	r0, 8001862 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800185a:	2003      	movs	r0, #3
}
 800185c:	b002      	add	sp, #8
 800185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001862:	68a3      	ldr	r3, [r4, #8]
 8001864:	6822      	ldr	r2, [r4, #0]
 8001866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800186a:	d107      	bne.n	800187c <HAL_UART_Transmit+0xa2>
 800186c:	6923      	ldr	r3, [r4, #16]
 800186e:	b92b      	cbnz	r3, 800187c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001870:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001878:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800187a:	e7cf      	b.n	800181c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800187c:	782b      	ldrb	r3, [r5, #0]
 800187e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001880:	3501      	adds	r5, #1
 8001882:	e7cb      	b.n	800181c <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001884:	2001      	movs	r0, #1
 8001886:	e7e9      	b.n	800185c <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001888:	2002      	movs	r0, #2
 800188a:	e7e7      	b.n	800185c <HAL_UART_Transmit+0x82>

0800188c <UART_CheckIdleState>:
{
 800188c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800188e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001890:	2600      	movs	r6, #0
 8001892:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001894:	f7fe fd2e 	bl	80002f4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800189e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018a0:	d417      	bmi.n	80018d2 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018a2:	6823      	ldr	r3, [r4, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	075b      	lsls	r3, r3, #29
 80018a8:	d50a      	bpl.n	80018c0 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	462b      	mov	r3, r5
 80018b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff ff5d 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 80018be:	b9a0      	cbnz	r0, 80018ea <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80018c0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80018c2:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80018c4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80018c8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80018cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80018d0:	e00c      	b.n	80018ec <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4632      	mov	r2, r6
 80018da:	4603      	mov	r3, r0
 80018dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff49 	bl	8001778 <UART_WaitOnFlagUntilTimeout>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d0db      	beq.n	80018a2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80018ea:	2003      	movs	r0, #3
}
 80018ec:	b002      	add	sp, #8
 80018ee:	bd70      	pop	{r4, r5, r6, pc}

080018f0 <HAL_UART_Init>:
{
 80018f0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018f2:	4604      	mov	r4, r0
 80018f4:	b360      	cbz	r0, 8001950 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80018f6:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80018fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018fe:	b91b      	cbnz	r3, 8001908 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001900:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001904:	f000 fb98 	bl	8002038 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001908:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800190a:	2324      	movs	r3, #36	; 0x24
 800190c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	f023 0301 	bic.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff fe33 	bl	8001584 <UART_SetConfig>
 800191e:	2801      	cmp	r0, #1
 8001920:	d016      	beq.n	8001950 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001924:	b113      	cbz	r3, 800192c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff fed2 	bl	80016d0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001934:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800193c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001944:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800194c:	f7ff bf9e 	b.w	800188c <UART_CheckIdleState>
}
 8001950:	2001      	movs	r0, #1
 8001952:	bd10      	pop	{r4, pc}

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b510      	push	{r4, lr}
 8001956:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001958:	2228      	movs	r2, #40	; 0x28
 800195a:	2100      	movs	r1, #0
 800195c:	a806      	add	r0, sp, #24
 800195e:	f000 fc45 	bl	80021ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001962:	2214      	movs	r2, #20
 8001964:	2100      	movs	r1, #0
 8001966:	a801      	add	r0, sp, #4
 8001968:	f000 fc40 	bl	80021ec <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800196c:	2301      	movs	r3, #1
 800196e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001970:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001972:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001974:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001978:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800197c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800197e:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001980:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001982:	f7fe fe07 	bl	8000594 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	230f      	movs	r3, #15
 8001988:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001990:	4621      	mov	r1, r4
 8001992:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001994:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001996:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001998:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800199c:	f7ff f8a2 	bl	8000ae4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80019a0:	b010      	add	sp, #64	; 0x40
 80019a2:	bd10      	pop	{r4, pc}

080019a4 <timer_1ms>:
		HAL_UART_Transmit(&huart2, espacio, sizeof(espacio), 10);
		tx_UART_float(&huart2, n_pulsos_media[i], 10);
	}
}

void timer_1ms(void) {	// Guarda las posiciones en un array cada 1 ms
 80019a4:	b570      	push	{r4, r5, r6, lr}

	if (cuenta_1ms == 1200) {	// Cuando pasa el tiempo se detiene el timer y se transmite
 80019a6:	4c13      	ldr	r4, [pc, #76]	; (80019f4 <timer_1ms+0x50>)
 80019a8:	4e13      	ldr	r6, [pc, #76]	; (80019f8 <timer_1ms+0x54>)
 80019aa:	8823      	ldrh	r3, [r4, #0]
 80019ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80019b0:	4625      	mov	r5, r4
 80019b2:	d106      	bne.n	80019c2 <timer_1ms+0x1e>
		HAL_TIM_Base_Stop_IT(&htim6);
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <timer_1ms+0x58>)
 80019b6:	f7ff f97a 	bl	8000cae <HAL_TIM_Base_Stop_IT>

		n_pulsos = 0;	// Resetamos los pulsos y el contador para posibles test consecutivos
 80019ba:	2300      	movs	r3, #0
 80019bc:	6033      	str	r3, [r6, #0]
		cuenta_1ms = 0;
 80019be:	8023      	strh	r3, [r4, #0]
		return;
 80019c0:	bd70      	pop	{r4, r5, r6, pc}
	}

	if (cuenta_1ms == 600) {	// Pasado este tiempo se detiene el motor
 80019c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80019c6:	d107      	bne.n	80019d8 <timer_1ms+0x34>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1); // Paramos las PWM
 80019c8:	2100      	movs	r1, #0
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <timer_1ms+0x5c>)
 80019cc:	f7ff fc92 	bl	80012f4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80019d0:	2104      	movs	r1, #4
 80019d2:	480c      	ldr	r0, [pc, #48]	; (8001a04 <timer_1ms+0x60>)
 80019d4:	f7ff fc8e 	bl	80012f4 <HAL_TIM_PWM_Stop>
	}

	n_pulsos_array[cuenta_1ms] = n_pulsos;	// Guardamos los pulsos detectados en el array
 80019d8:	edd6 7a00 	vldr	s15, [r6]
 80019dc:	882b      	ldrh	r3, [r5, #0]
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <timer_1ms+0x64>)
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	cuenta_1ms++;	// Incrementamos el contador cada 1 ms
 80019e8:	3301      	adds	r3, #1
	n_pulsos_array[cuenta_1ms] = n_pulsos;	// Guardamos los pulsos detectados en el array
 80019ea:	edc2 7a00 	vstr	s15, [r2]
	cuenta_1ms++;	// Incrementamos el contador cada 1 ms
 80019ee:	802b      	strh	r3, [r5, #0]
 80019f0:	bd70      	pop	{r4, r5, r6, pc}
 80019f2:	bf00      	nop
 80019f4:	2000008c 	.word	0x2000008c
 80019f8:	20000090 	.word	0x20000090
 80019fc:	20002664 	.word	0x20002664
 8001a00:	200026a4 	.word	0x200026a4
 8001a04:	20002624 	.word	0x20002624
 8001a08:	20000094 	.word	0x20000094

08001a0c <cuenta_pulsos>:
	}

void cuenta_pulsos(void) {	// Cuenta cada pulso recibido por los canales A y B del encoder
 8001a0c:	b538      	push	{r3, r4, r5, lr}

	static uint8_t estado_encoder = estado_00;  // Estado actual del encoder
	static uint8_t estado_anterior = estado_00; // Estado anterior del encoder

	estado_anterior = estado_encoder;	// Actualizamos el valor anterior del encoder
 8001a0e:	4c2c      	ldr	r4, [pc, #176]	; (8001ac0 <cuenta_pulsos+0xb4>)
 8001a10:	4d2c      	ldr	r5, [pc, #176]	; (8001ac4 <cuenta_pulsos+0xb8>)
 8001a12:	7823      	ldrb	r3, [r4, #0]
 8001a14:	702b      	strb	r3, [r5, #0]

	// Asignamos el valor actual de encoder
	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))) {
 8001a16:	2120      	movs	r1, #32
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1c:	f7fe fda6 	bl	800056c <HAL_GPIO_ReadPin>
 8001a20:	b930      	cbnz	r0, 8001a30 <cuenta_pulsos+0x24>
 8001a22:	2140      	movs	r1, #64	; 0x40
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f7fe fda0 	bl	800056c <HAL_GPIO_ReadPin>
 8001a2c:	b900      	cbnz	r0, 8001a30 <cuenta_pulsos+0x24>
		estado_encoder = estado_00;
 8001a2e:	7020      	strb	r0, [r4, #0]
	}

	if (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))) {
 8001a30:	2120      	movs	r1, #32
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a36:	f7fe fd99 	bl	800056c <HAL_GPIO_ReadPin>
 8001a3a:	b938      	cbnz	r0, 8001a4c <cuenta_pulsos+0x40>
 8001a3c:	2140      	movs	r1, #64	; 0x40
 8001a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a42:	f7fe fd93 	bl	800056c <HAL_GPIO_ReadPin>
 8001a46:	b108      	cbz	r0, 8001a4c <cuenta_pulsos+0x40>
		estado_encoder = estado_01;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	7023      	strb	r3, [r4, #0]
	}

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))) {
 8001a4c:	2120      	movs	r1, #32
 8001a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a52:	f7fe fd8b 	bl	800056c <HAL_GPIO_ReadPin>
 8001a56:	b138      	cbz	r0, 8001a68 <cuenta_pulsos+0x5c>
 8001a58:	2140      	movs	r1, #64	; 0x40
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f7fe fd85 	bl	800056c <HAL_GPIO_ReadPin>
 8001a62:	b908      	cbnz	r0, 8001a68 <cuenta_pulsos+0x5c>
		estado_encoder = estado_10;
 8001a64:	2302      	movs	r3, #2
 8001a66:	7023      	strb	r3, [r4, #0]
	}

	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)) && (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6))) {
 8001a68:	2120      	movs	r1, #32
 8001a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a6e:	f7fe fd7d 	bl	800056c <HAL_GPIO_ReadPin>
 8001a72:	b138      	cbz	r0, 8001a84 <cuenta_pulsos+0x78>
 8001a74:	2140      	movs	r1, #64	; 0x40
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f7fe fd77 	bl	800056c <HAL_GPIO_ReadPin>
 8001a7e:	b108      	cbz	r0, 8001a84 <cuenta_pulsos+0x78>
		estado_encoder = estado_11;
 8001a80:	2303      	movs	r3, #3
 8001a82:	7023      	strb	r3, [r4, #0]
	}

	// Comparamos el valor actual del encoder con el anterior para conocer el sentido de giro
	switch (estado_anterior) {
 8001a84:	782b      	ldrb	r3, [r5, #0]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d818      	bhi.n	8001abc <cuenta_pulsos+0xb0>
 8001a8a:	e8df f003 	tbb	[pc, r3]
 8001a8e:	0a02      	.short	0x0a02
 8001a90:	0d10      	.short	0x0d10
		case estado_00:	if (estado_encoder == estado_01) { n_pulsos = n_pulsos + 1;}
 8001a92:	7823      	ldrb	r3, [r4, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10d      	bne.n	8001ab4 <cuenta_pulsos+0xa8>
 8001a98:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <cuenta_pulsos+0xbc>)
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	3301      	adds	r3, #1
						//if (estado_encoder == estado_10) { n_pulsos = n_pulsos - 1;}
						else { n_pulsos = n_pulsos - 1;}
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	bd38      	pop	{r3, r4, r5, pc}
						break;
		case estado_01:	if (estado_encoder == estado_11) { n_pulsos = n_pulsos + 1;}
 8001aa2:	7823      	ldrb	r3, [r4, #0]
 8001aa4:	2b03      	cmp	r3, #3
 8001aa6:	e7f6      	b.n	8001a96 <cuenta_pulsos+0x8a>
						//if (estado_encoder == estado_00) { n_pulsos = n_pulsos - 1;}
						else { n_pulsos = n_pulsos - 1;}
						break;
		case estado_11:	if (estado_encoder == estado_10) { n_pulsos = n_pulsos + 1;}
 8001aa8:	7823      	ldrb	r3, [r4, #0]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	e7f3      	b.n	8001a96 <cuenta_pulsos+0x8a>
						//if (estado_encoder == estado_01) { n_pulsos = n_pulsos - 1;}
						else { n_pulsos = n_pulsos - 1;}
						break;
		case estado_10:	if (estado_encoder == estado_00) { n_pulsos = n_pulsos + 1;}
 8001aae:	7823      	ldrb	r3, [r4, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f1      	beq.n	8001a98 <cuenta_pulsos+0x8c>
						else { n_pulsos = n_pulsos - 1;}
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <cuenta_pulsos+0xbc>)
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	e7f0      	b.n	8001a9e <cuenta_pulsos+0x92>
 8001abc:	bd38      	pop	{r3, r4, r5, pc}
 8001abe:	bf00      	nop
 8001ac0:	2000008f 	.word	0x2000008f
 8001ac4:	2000008e 	.word	0x2000008e
 8001ac8:	20000090 	.word	0x20000090

08001acc <test_motor>:
	}
}

void test_motor(float voltaje, uint8_t sentido)
{
	int duty_cycle = (int)(voltaje*100);	// Pasamos de voltios a centesimas de voltio, que equivale al duty_cycle
 8001acc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001b10 <test_motor+0x44>
 8001ad0:	ee20 0a27 	vmul.f32	s0, s0, s15

	if (sentido == HORARIO) {
 8001ad4:	2801      	cmp	r0, #1
	int duty_cycle = (int)(voltaje*100);	// Pasamos de voltios a centesimas de voltio, que equivale al duty_cycle
 8001ad6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
{
 8001ada:	b508      	push	{r3, lr}
	int duty_cycle = (int)(voltaje*100);	// Pasamos de voltios a centesimas de voltio, que equivale al duty_cycle
 8001adc:	ee17 3a90 	vmov	r3, s15
	if (sentido == HORARIO) {
 8001ae0:	d10c      	bne.n	8001afc <test_motor+0x30>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, htim2.Init.Period - duty_cycle);
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <test_motor+0x48>)
 8001ae4:	68c2      	ldr	r2, [r0, #12]
 8001ae6:	6801      	ldr	r1, [r0, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	634b      	str	r3, [r1, #52]	; 0x34
		//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty_cycle);// Asignamos el duty cycle
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);	// Arrancamos el PWM 2
 8001aec:	2100      	movs	r1, #0
	}
	if (sentido == ANTIHORARIO) {

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period - duty_cycle); // Asignamos el duty cycle
		//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, duty_cycle);
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Arrancamos el PWM 3
 8001aee:	f7ff fbdf 	bl	80012b0 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start_IT(&htim6);				// Arrancamos el timer de 1 ms
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <test_motor+0x4c>)
	}
}
 8001af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_TIM_Base_Start_IT(&htim6);				// Arrancamos el timer de 1 ms
 8001af8:	f7ff b8ce 	b.w	8000c98 <HAL_TIM_Base_Start_IT>
	if (sentido == ANTIHORARIO) {
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d106      	bne.n	8001b0e <test_motor+0x42>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, htim3.Init.Period - duty_cycle); // Asignamos el duty cycle
 8001b00:	4806      	ldr	r0, [pc, #24]	; (8001b1c <test_motor+0x50>)
 8001b02:	68c2      	ldr	r2, [r0, #12]
 8001b04:	6801      	ldr	r1, [r0, #0]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	638b      	str	r3, [r1, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);	// Arrancamos el PWM 3
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	e7ef      	b.n	8001aee <test_motor+0x22>
 8001b0e:	bd08      	pop	{r3, pc}
 8001b10:	42c80000 	.word	0x42c80000
 8001b14:	200026a4 	.word	0x200026a4
 8001b18:	20002664 	.word	0x20002664
 8001b1c:	20002624 	.word	0x20002624

08001b20 <tx_UART_int>:
	HAL_UART_Transmit(huart, salto, 2, 10);

}

void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout)
{
 8001b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	int size = 1;
	uint8_t negativo = 0;

	if (data < 0) {	// Si los pulsos
 8001b24:	1e0a      	subs	r2, r1, #0
{
 8001b26:	b083      	sub	sp, #12
		data = -data;
 8001b28:	bfb8      	it	lt
 8001b2a:	4252      	neglt	r2, r2
{
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	af00      	add	r7, sp, #0
		negativo = 1;
 8001b30:	bfb4      	ite	lt
 8001b32:	f04f 0801 	movlt.w	r8, #1
	uint8_t negativo = 0;
 8001b36:	f04f 0800 	movge.w	r8, #0
	}

	int numero = data;
 8001b3a:	4613      	mov	r3, r2
	int size = 1;
 8001b3c:	2401      	movs	r4, #1

	while(numero > 9) {
	  numero =  numero/10;
 8001b3e:	210a      	movs	r1, #10
	while(numero > 9) {
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	dc29      	bgt.n	8001b98 <tx_UART_int+0x78>
	  size++;
	}

	char data_char[size];		// String de chars
 8001b44:	1de3      	adds	r3, r4, #7
 8001b46:	f023 0307 	bic.w	r3, r3, #7
 8001b4a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4e:	46e9      	mov	r9, sp
	uint8_t data_tx[size];	// String de uint8_t

	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001b50:	4915      	ldr	r1, [pc, #84]	; (8001ba8 <tx_UART_int+0x88>)
	uint8_t data_tx[size];	// String de uint8_t
 8001b52:	ebad 0d03 	sub.w	sp, sp, r3
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001b56:	4648      	mov	r0, r9
 8001b58:	f000 fb50 	bl	80021fc <siprintf>
	uint8_t data_tx[size];	// String de uint8_t
 8001b5c:	466e      	mov	r6, sp

	for(uint8_t i=0; i<size; i++ ) {			// Casting de char a uint8_t
 8001b5e:	2200      	movs	r2, #0
 8001b60:	b2d3      	uxtb	r3, r2
 8001b62:	429c      	cmp	r4, r3
 8001b64:	f102 0201 	add.w	r2, r2, #1
 8001b68:	dc1a      	bgt.n	8001ba0 <tx_UART_int+0x80>
		data_tx[i] = (uint8_t) data_char[i];
	}

	if (negativo) {		// Si el numero es negativo, transmite un "-" antes
 8001b6a:	f1b8 0f00 	cmp.w	r8, #0
 8001b6e:	d009      	beq.n	8001b84 <tx_UART_int+0x64>
		uint8_t menos[] = "-";
 8001b70:	f107 0108 	add.w	r1, r7, #8
 8001b74:	232d      	movs	r3, #45	; 0x2d
 8001b76:	f821 3d04 	strh.w	r3, [r1, #-4]!
		HAL_UART_Transmit(huart, menos, 1, 10);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f7ff fe2b 	bl	80017da <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(huart,data_tx,sizeof(data_tx), 10);	// TX por UART del array de uint8_t
 8001b84:	230a      	movs	r3, #10
 8001b86:	b2a2      	uxth	r2, r4
 8001b88:	4631      	mov	r1, r6
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f7ff fe25 	bl	80017da <HAL_UART_Transmit>
}
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  numero =  numero/10;
 8001b98:	fb93 f3f1 	sdiv	r3, r3, r1
	  size++;
 8001b9c:	3401      	adds	r4, #1
 8001b9e:	e7cf      	b.n	8001b40 <tx_UART_int+0x20>
		data_tx[i] = (uint8_t) data_char[i];
 8001ba0:	f819 1003 	ldrb.w	r1, [r9, r3]
 8001ba4:	54f1      	strb	r1, [r6, r3]
 8001ba6:	e7db      	b.n	8001b60 <tx_UART_int+0x40>
 8001ba8:	08002a93 	.word	0x08002a93

08001bac <tx_UART_float>:
	int p_entera = data/1;
 8001bac:	eefd 7ac0 	vcvt.s32.f32	s15, s0
void tx_UART_float(UART_HandleTypeDef *huart, float data, uint32_t Timeout) {
 8001bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int p_decimal = ((data - p_entera)*100)/1;
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	tx_UART_int(huart, p_entera, 10);
 8001bb6:	ee17 1a90 	vmov	r1, s15
	int p_decimal = ((data - p_entera)*100)/1;
 8001bba:	ee30 0a47 	vsub.f32	s0, s0, s14
 8001bbe:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001c28 <tx_UART_float+0x7c>
 8001bc2:	ee20 0a07 	vmul.f32	s0, s0, s14
	tx_UART_int(huart, p_entera, 10);
 8001bc6:	220a      	movs	r2, #10
	int p_decimal = ((data - p_entera)*100)/1;
 8001bc8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
void tx_UART_float(UART_HandleTypeDef *huart, float data, uint32_t Timeout) {
 8001bcc:	4605      	mov	r5, r0
	int p_decimal = ((data - p_entera)*100)/1;
 8001bce:	ee17 4a10 	vmov	r4, s14
	tx_UART_int(huart, p_entera, 10);
 8001bd2:	f7ff ffa5 	bl	8001b20 <tx_UART_int>
	uint8_t punto[] = ".";
 8001bd6:	a902      	add	r1, sp, #8
 8001bd8:	232e      	movs	r3, #46	; 0x2e
 8001bda:	f821 3d08 	strh.w	r3, [r1, #-8]!
	HAL_UART_Transmit(huart, punto, 1, 10);
 8001bde:	2201      	movs	r2, #1
 8001be0:	230a      	movs	r3, #10
 8001be2:	4628      	mov	r0, r5
 8001be4:	f7ff fdf9 	bl	80017da <HAL_UART_Transmit>
	if (p_decimal < 10) {
 8001be8:	2c09      	cmp	r4, #9
 8001bea:	dc08      	bgt.n	8001bfe <tx_UART_float+0x52>
		uint8_t cero[] = "0";
 8001bec:	2330      	movs	r3, #48	; 0x30
 8001bee:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_UART_Transmit(&huart2, cero, 1, 10);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	a901      	add	r1, sp, #4
 8001bf8:	480c      	ldr	r0, [pc, #48]	; (8001c2c <tx_UART_float+0x80>)
 8001bfa:	f7ff fdee 	bl	80017da <HAL_UART_Transmit>
	tx_UART_int(huart, p_decimal, 10);
 8001bfe:	4621      	mov	r1, r4
 8001c00:	4628      	mov	r0, r5
 8001c02:	220a      	movs	r2, #10
 8001c04:	f7ff ff8c 	bl	8001b20 <tx_UART_int>
	uint8_t salto[] = "\r\n";
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <tx_UART_float+0x84>)
 8001c0a:	881a      	ldrh	r2, [r3, #0]
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8001c12:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_UART_Transmit(huart, salto, 2, 10);
 8001c16:	2202      	movs	r2, #2
 8001c18:	230a      	movs	r3, #10
 8001c1a:	a901      	add	r1, sp, #4
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f7ff fddc 	bl	80017da <HAL_UART_Transmit>
}
 8001c22:	b003      	add	sp, #12
 8001c24:	bd30      	pop	{r4, r5, pc}
 8001c26:	bf00      	nop
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	200026e4 	.word	0x200026e4
 8001c30:	08002a90 	.word	0x08002a90

08001c34 <tx_pulsos>:
void tx_pulsos (void) {	// Transmite por UART las posiciones guardadas
 8001c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c36:	4e10      	ldr	r6, [pc, #64]	; (8001c78 <tx_pulsos+0x44>)
		tx_UART_int(&huart2, i, 10);
 8001c38:	4d10      	ldr	r5, [pc, #64]	; (8001c7c <tx_pulsos+0x48>)
		uint8_t espacio[] = "    ";
 8001c3a:	4f11      	ldr	r7, [pc, #68]	; (8001c80 <tx_pulsos+0x4c>)
	for (int i = 0; i <1200; i++ ) {
 8001c3c:	2400      	movs	r4, #0
		tx_UART_int(&huart2, i, 10);
 8001c3e:	4621      	mov	r1, r4
 8001c40:	220a      	movs	r2, #10
 8001c42:	4628      	mov	r0, r5
 8001c44:	f7ff ff6c 	bl	8001b20 <tx_UART_int>
		uint8_t espacio[] = "    ";
 8001c48:	6838      	ldr	r0, [r7, #0]
 8001c4a:	793b      	ldrb	r3, [r7, #4]
 8001c4c:	9000      	str	r0, [sp, #0]
 8001c4e:	f88d 3004 	strb.w	r3, [sp, #4]
		HAL_UART_Transmit(&huart2, espacio, sizeof(espacio), 10);
 8001c52:	2205      	movs	r2, #5
 8001c54:	230a      	movs	r3, #10
 8001c56:	4669      	mov	r1, sp
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7ff fdbe 	bl	80017da <HAL_UART_Transmit>
	for (int i = 0; i <1200; i++ ) {
 8001c5e:	3401      	adds	r4, #1
		tx_UART_float(&huart2, n_pulsos_media[i], 10);
 8001c60:	210a      	movs	r1, #10
 8001c62:	ecb6 0a01 	vldmia	r6!, {s0}
 8001c66:	4628      	mov	r0, r5
 8001c68:	f7ff ffa0 	bl	8001bac <tx_UART_float>
	for (int i = 0; i <1200; i++ ) {
 8001c6c:	f5b4 6f96 	cmp.w	r4, #1200	; 0x4b0
 8001c70:	d1e5      	bne.n	8001c3e <tx_pulsos+0xa>
}
 8001c72:	b003      	add	sp, #12
 8001c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20001354 	.word	0x20001354
 8001c7c:	200026e4 	.word	0x200026e4
 8001c80:	08002a96 	.word	0x08002a96

08001c84 <media>:
void media (float voltaje, uint8_t sentido, uint8_t n_veces) {
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	4606      	mov	r6, r0
 8001c88:	ed2d 8b02 	vpush	{d8}
 8001c8c:	460d      	mov	r5, r1
 8001c8e:	eeb0 8a40 	vmov.f32	s16, s0
	for (uint8_t i=0; i< n_veces; i++){
 8001c92:	2400      	movs	r4, #0
 8001c94:	42ac      	cmp	r4, r5
 8001c96:	d105      	bne.n	8001ca4 <media+0x20>
}
 8001c98:	ecbd 8b02 	vpop	{d8}
 8001c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	tx_pulsos();
 8001ca0:	f7ff bfc8 	b.w	8001c34 <tx_pulsos>
		test_motor(voltaje, sentido);
 8001ca4:	4630      	mov	r0, r6
 8001ca6:	eeb0 0a48 	vmov.f32	s0, s16
 8001caa:	f7ff ff0f 	bl	8001acc <test_motor>
		HAL_Delay(7000);
 8001cae:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001cb2:	f7fe fb25 	bl	8000300 <HAL_Delay>
 8001cb6:	1c62      	adds	r2, r4, #1
			n_pulsos_media[j] = (n_pulsos_media[j]*i + n_pulsos_array[j]) / (i+1);
 8001cb8:	ee07 4a90 	vmov	s15, r4
 8001cbc:	ee07 2a10 	vmov	s14, r2
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <media+0x68>)
 8001cc2:	480b      	ldr	r0, [pc, #44]	; (8001cf0 <media+0x6c>)
 8001cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8001ccc:	f503 5196 	add.w	r1, r3, #4800	; 0x12c0
 8001cd0:	edd3 6a00 	vldr	s13, [r3]
 8001cd4:	ecb0 7a01 	vldmia	r0!, {s14}
 8001cd8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8001cdc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8001ce0:	ece3 6a01 	vstmia	r3!, {s13}
		for (uint16_t j=0; j<1200; j++){
 8001ce4:	428b      	cmp	r3, r1
 8001ce6:	d1f3      	bne.n	8001cd0 <media+0x4c>
 8001ce8:	4614      	mov	r4, r2
 8001cea:	e7d3      	b.n	8001c94 <media+0x10>
 8001cec:	20001354 	.word	0x20001354
 8001cf0:	20000094 	.word	0x20000094

08001cf4 <main>:
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b090      	sub	sp, #64	; 0x40
  HAL_Init();
 8001cf8:	f7fe fade 	bl	80002b8 <HAL_Init>
  SystemClock_Config();
 8001cfc:	f7ff fe2a 	bl	8001954 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	2214      	movs	r2, #20
 8001d02:	2100      	movs	r1, #0
 8001d04:	a809      	add	r0, sp, #36	; 0x24
 8001d06:	f000 fa71 	bl	80021ec <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	4b6d      	ldr	r3, [pc, #436]	; (8001ec0 <main+0x1cc>)
  htim2.Instance = TIM2;
 8001d0c:	4d6d      	ldr	r5, [pc, #436]	; (8001ec4 <main+0x1d0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001d1c:	9200      	str	r2, [sp, #0]
 8001d1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	695a      	ldr	r2, [r3, #20]
 8001d22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = Encoder_A_IT_Pin|Encoder_B_IT_Pin;
 8001d30:	2760      	movs	r7, #96	; 0x60
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <main+0x1d4>)
 8001d36:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	a909      	add	r1, sp, #36	; 0x24
 8001d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = Encoder_A_IT_Pin|Encoder_B_IT_Pin;
 8001d3e:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f7fe fb5a 	bl	80003f8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	4611      	mov	r1, r2
 8001d48:	2017      	movs	r0, #23
 8001d4a:	f7fe faff 	bl	800034c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d4e:	2017      	movs	r0, #23
 8001d50:	f7fe fb30 	bl	80003b4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001d54:	485d      	ldr	r0, [pc, #372]	; (8001ecc <main+0x1d8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4a5e      	ldr	r2, [pc, #376]	; (8001ed0 <main+0x1dc>)
 8001d58:	2400      	movs	r4, #0
 8001d5a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001d5e:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d62:	230c      	movs	r3, #12
 8001d64:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d66:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d68:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d6c:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d70:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d72:	f7ff fdbd 	bl	80018f0 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d76:	2210      	movs	r2, #16
 8001d78:	4621      	mov	r1, r4
 8001d7a:	a805      	add	r0, sp, #20
 8001d7c:	f000 fa36 	bl	80021ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d80:	221c      	movs	r2, #28
 8001d82:	4621      	mov	r1, r4
 8001d84:	a809      	add	r0, sp, #36	; 0x24
  htim2.Init.Prescaler = 1;
 8001d86:	2601      	movs	r6, #1
  htim2.Init.Period = 1199;
 8001d88:	f240 4aaf 	movw	sl, #1199	; 0x4af
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	9402      	str	r4, [sp, #8]
 8001d8e:	9403      	str	r4, [sp, #12]
 8001d90:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d92:	f000 fa2b 	bl	80021ec <memset>
  htim2.Init.Prescaler = 1;
 8001d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d9a:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 1;
 8001d9c:	e885 0048 	stmia.w	r5, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da0:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1199;
 8001da2:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001daa:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dae:	f7ff f893 	bl	8000ed8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001db2:	a905      	add	r1, sp, #20
 8001db4:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001db6:	f8cd 9014 	str.w	r9, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dba:	f7ff f9b7 	bl	800112c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f7ff f8a4 	bl	8000f0c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc4:	a902      	add	r1, sp, #8
 8001dc6:	4628      	mov	r0, r5
  sConfigOC.Pulse = 600;
 8001dc8:	f44f 7816 	mov.w	r8, #600	; 0x258
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dce:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dd0:	f7ff fbb2 	bl	8001538 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd4:	4622      	mov	r2, r4
 8001dd6:	a909      	add	r1, sp, #36	; 0x24
 8001dd8:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	9709      	str	r7, [sp, #36]	; 0x24
  sConfigOC.Pulse = 600;
 8001ddc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de0:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de4:	f7ff fb20 	bl	8001428 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001de8:	4628      	mov	r0, r5
 8001dea:	f000 f8eb 	bl	8001fc4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	2210      	movs	r2, #16
 8001df0:	4621      	mov	r1, r4
 8001df2:	a805      	add	r0, sp, #20
  htim3.Instance = TIM3;
 8001df4:	4d37      	ldr	r5, [pc, #220]	; (8001ed4 <main+0x1e0>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001df6:	f000 f9f9 	bl	80021ec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfa:	221c      	movs	r2, #28
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e00:	9402      	str	r4, [sp, #8]
 8001e02:	9403      	str	r4, [sp, #12]
 8001e04:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e06:	f000 f9f1 	bl	80021ec <memset>
  htim3.Instance = TIM3;
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <main+0x1e4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e0e:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 1;
 8001e10:	e885 0048 	stmia.w	r5, {r3, r6}
  htim3.Init.Period = 1199;
 8001e14:	f8c5 a00c 	str.w	sl, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e1c:	f7ff f85c 	bl	8000ed8 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e20:	a905      	add	r1, sp, #20
 8001e22:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e24:	f8cd 9014 	str.w	r9, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e28:	f7ff f980 	bl	800112c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f7ff f86d 	bl	8000f0c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e32:	a902      	add	r1, sp, #8
 8001e34:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e36:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e38:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e3a:	f7ff fb7d 	bl	8001538 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e3e:	2204      	movs	r2, #4
 8001e40:	a909      	add	r1, sp, #36	; 0x24
 8001e42:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e44:	9709      	str	r7, [sp, #36]	; 0x24
  sConfigOC.Pulse = 600;
 8001e46:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e4c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	f7ff faeb 	bl	8001428 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001e52:	4628      	mov	r0, r5
 8001e54:	f000 f8b6 	bl	8001fc4 <HAL_TIM_MspPostInit>
  htim6.Instance = TIM6;
 8001e58:	4d20      	ldr	r5, [pc, #128]	; (8001edc <main+0x1e8>)
  htim6.Init.Prescaler = 15;
 8001e5a:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <main+0x1ec>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	60ac      	str	r4, [r5, #8]
  htim6.Init.Prescaler = 15;
 8001e5e:	230f      	movs	r3, #15
 8001e60:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e64:	4628      	mov	r0, r5
  htim6.Init.Period = 3999;
 8001e66:	f640 739f 	movw	r3, #3999	; 0xf9f
 8001e6a:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e6e:	9409      	str	r4, [sp, #36]	; 0x24
 8001e70:	940a      	str	r4, [sp, #40]	; 0x28
 8001e72:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e74:	f7ff f830 	bl	8000ed8 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e78:	a909      	add	r1, sp, #36	; 0x24
 8001e7a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7c:	9409      	str	r4, [sp, #36]	; 0x24
  htim7.Instance = TIM7;
 8001e7e:	4d19      	ldr	r5, [pc, #100]	; (8001ee4 <main+0x1f0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e80:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e82:	f7ff fb59 	bl	8001538 <HAL_TIMEx_MasterConfigSynchronization>
  htim7.Init.Prescaler = 31999;
 8001e86:	4818      	ldr	r0, [pc, #96]	; (8001ee8 <main+0x1f4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e88:	9409      	str	r4, [sp, #36]	; 0x24
  htim7.Init.Prescaler = 31999;
 8001e8a:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8001e8e:	e885 0009 	stmia.w	r5, {r0, r3}
  htim7.Init.Period = 39;
 8001e92:	2327      	movs	r3, #39	; 0x27
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e94:	4628      	mov	r0, r5
  htim7.Init.Period = 39;
 8001e96:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e98:	940a      	str	r4, [sp, #40]	; 0x28
 8001e9a:	940b      	str	r4, [sp, #44]	; 0x2c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	60ac      	str	r4, [r5, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ea0:	f7ff f81a 	bl	8000ed8 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea4:	a909      	add	r1, sp, #36	; 0x24
 8001ea6:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea8:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eaa:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001eac:	f7ff fb44 	bl	8001538 <HAL_TIMEx_MasterConfigSynchronization>
  media(9, HORARIO, 10); // 10.52 voltios
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8001eb8:	f7ff fee4 	bl	8001c84 <media>
 8001ebc:	e7fe      	b.n	8001ebc <main+0x1c8>
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	200026a4 	.word	0x200026a4
 8001ec8:	10310000 	.word	0x10310000
 8001ecc:	200026e4 	.word	0x200026e4
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	20002624 	.word	0x20002624
 8001ed8:	40000400 	.word	0x40000400
 8001edc:	20002664 	.word	0x20002664
 8001ee0:	40001000 	.word	0x40001000
 8001ee4:	20002754 	.word	0x20002754
 8001ee8:	40001400 	.word	0x40001400

08001eec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_MspInit+0x2c>)
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	619a      	str	r2, [r3, #24]
 8001ef6:	699a      	ldr	r2, [r3, #24]
{
 8001ef8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	f002 0201 	and.w	r2, r2, #1
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	69da      	ldr	r2, [r3, #28]
 8001f04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f14:	b002      	add	sp, #8
 8001f16:	4770      	bx	lr
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8001f1e:	6803      	ldr	r3, [r0, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d10d      	bne.n	8001f42 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	f042 0201 	orr.w	r2, r2, #1
 8001f30:	61da      	str	r2, [r3, #28]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f3c:	b005      	add	sp, #20
 8001f3e:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8001f42:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <HAL_TIM_Base_MspInit+0x98>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d10a      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	f042 0202 	orr.w	r2, r2, #2
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	9b01      	ldr	r3, [sp, #4]
 8001f5c:	e7ee      	b.n	8001f3c <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM6)
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_TIM_Base_MspInit+0xa0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d112      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	f042 0210 	orr.w	r2, r2, #16
 8001f6c:	61da      	str	r2, [r3, #28]
 8001f6e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001f70:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001f78:	2036      	movs	r0, #54	; 0x36
 8001f7a:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001f7e:	f7fe f9e5 	bl	800034c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001f82:	2036      	movs	r0, #54	; 0x36
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001f84:	f7fe fa16 	bl	80003b4 <HAL_NVIC_EnableIRQ>
}
 8001f88:	e7d8      	b.n	8001f3c <HAL_TIM_Base_MspInit+0x20>
  else if(htim_base->Instance==TIM7)
 8001f8a:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_TIM_Base_MspInit+0xa4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d1d5      	bne.n	8001f3c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <HAL_TIM_Base_MspInit+0x9c>)
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001fa4:	2037      	movs	r0, #55	; 0x37
 8001fa6:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fa8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001faa:	f7fe f9cf 	bl	800034c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8001fae:	2037      	movs	r0, #55	; 0x37
 8001fb0:	e7e8      	b.n	8001f84 <HAL_TIM_Base_MspInit+0x68>
 8001fb2:	bf00      	nop
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40001000 	.word	0x40001000
 8001fc0:	40001400 	.word	0x40001400

08001fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fca:	2214      	movs	r2, #20
 8001fcc:	2100      	movs	r1, #0
 8001fce:	a803      	add	r0, sp, #12
 8001fd0:	f000 f90c 	bl	80021ec <memset>
  if(htim->Instance==TIM2)
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fda:	d116      	bne.n	800200a <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	9b01      	ldr	r3, [sp, #4]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = IN1A_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = IN1A_PWM_Pin;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = IN2A_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(IN2A_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	a903      	add	r1, sp, #12
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002000:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(IN2A_PWM_GPIO_Port, &GPIO_InitStruct);
 8002002:	f7fe f9f9 	bl	80003f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002006:	b008      	add	sp, #32
 8002008:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM3)
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_TIM_MspPostInit+0x6c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d1fa      	bne.n	8002006 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_TIM_MspPostInit+0x70>)
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = IN2A_PWM_Pin;
 8002024:	2310      	movs	r3, #16
 8002026:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002028:	2302      	movs	r3, #2
 800202a:	9304      	str	r3, [sp, #16]
 800202c:	e7e5      	b.n	8001ffa <HAL_TIM_MspPostInit+0x36>
 800202e:	bf00      	nop
 8002030:	40000400 	.word	0x40000400
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002038:	b510      	push	{r4, lr}
 800203a:	4604      	mov	r4, r0
 800203c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203e:	2214      	movs	r2, #20
 8002040:	2100      	movs	r1, #0
 8002042:	a803      	add	r0, sp, #12
 8002044:	f000 f8d2 	bl	80021ec <memset>
  if(huart->Instance==USART2)
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_UART_MspInit+0x60>)
 800204c:	429a      	cmp	r2, r3
 800204e:	d121      	bne.n	8002094 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002050:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8002056:	69da      	ldr	r2, [r3, #28]
 8002058:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800205c:	61da      	str	r2, [r3, #28]
 800205e:	69da      	ldr	r2, [r3, #28]
 8002060:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002064:	9201      	str	r2, [sp, #4]
 8002066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	9302      	str	r3, [sp, #8]
 8002078:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800207a:	f248 0304 	movw	r3, #32772	; 0x8004
 800207e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002084:	2303      	movs	r3, #3
 8002086:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800208c:	2307      	movs	r3, #7
 800208e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f7fe f9b2 	bl	80003f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002094:	b008      	add	sp, #32
 8002096:	bd10      	pop	{r4, pc}
 8002098:	40004400 	.word	0x40004400

0800209c <NMI_Handler>:
 800209c:	4770      	bx	lr

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	e7fe      	b.n	800209e <HardFault_Handler>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	e7fe      	b.n	80020a0 <MemManage_Handler>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	e7fe      	b.n	80020a2 <BusFault_Handler>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	e7fe      	b.n	80020a4 <UsageFault_Handler>

080020a6 <SVC_Handler>:
 80020a6:	4770      	bx	lr

080020a8 <DebugMon_Handler>:
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	4770      	bx	lr

080020ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ac:	f7fe b916 	b.w	80002dc <HAL_IncTick>

080020b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
		cuenta_pulsos();
 80020b2:	f7ff fcab 	bl	8001a0c <cuenta_pulsos>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020b6:	2020      	movs	r0, #32
 80020b8:	f7fe fa60 	bl	800057c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020bc:	2040      	movs	r0, #64	; 0x40
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80020c2:	f7fe ba5b 	b.w	800057c <HAL_GPIO_EXTI_IRQHandler>
	...

080020c8 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80020c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */
	timer_1ms();
 80020ca:	f7ff fc6b 	bl	80019a4 <timer_1ms>
  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020ce:	4802      	ldr	r0, [pc, #8]	; (80020d8 <TIM6_DAC1_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80020d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80020d4:	f7fe be06 	b.w	8000ce4 <HAL_TIM_IRQHandler>
 80020d8:	20002664 	.word	0x20002664

080020dc <TIM7_DAC2_IRQHandler>:
void TIM7_DAC2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020dc:	4801      	ldr	r0, [pc, #4]	; (80020e4 <TIM7_DAC2_IRQHandler+0x8>)
 80020de:	f7fe be01 	b.w	8000ce4 <HAL_TIM_IRQHandler>
 80020e2:	bf00      	nop
 80020e4:	20002754 	.word	0x20002754

080020e8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4915      	ldr	r1, [pc, #84]	; (8002140 <SystemInit+0x58>)
 80020ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <SystemInit+0x5c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002100:	6858      	ldr	r0, [r3, #4]
 8002102:	4a11      	ldr	r2, [pc, #68]	; (8002148 <SystemInit+0x60>)
 8002104:	4002      	ands	r2, r0
 8002106:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800210e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002112:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800211a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002122:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002126:	f022 020f 	bic.w	r2, r2, #15
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800212c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <SystemInit+0x64>)
 8002130:	4002      	ands	r2, r0
 8002132:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800213c:	608b      	str	r3, [r1, #8]
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00
 8002144:	40021000 	.word	0x40021000
 8002148:	f87fc00c 	.word	0xf87fc00c
 800214c:	ff00fccc 	.word	0xff00fccc

08002150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002154:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002156:	e003      	b.n	8002160 <LoopCopyDataInit>

08002158 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800215a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800215c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800215e:	3104      	adds	r1, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002164:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002166:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002168:	d3f6      	bcc.n	8002158 <CopyDataInit>
	ldr	r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopForever+0x12>)
	b	LoopFillZerobss
 800216c:	e002      	b.n	8002174 <LoopFillZerobss>

0800216e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800216e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002170:	f842 3b04 	str.w	r3, [r2], #4

08002174 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <LoopForever+0x16>)
	cmp	r2, r3
 8002176:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002178:	d3f9      	bcc.n	800216e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800217a:	f7ff ffb5 	bl	80020e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f000 f811 	bl	80021a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002182:	f7ff fdb7 	bl	8001cf4 <main>

08002186 <LoopForever>:

LoopForever:
    b LoopForever
 8002186:	e7fe      	b.n	8002186 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002188:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800218c:	08002af0 	.word	0x08002af0
	ldr	r0, =_sdata
 8002190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002194:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002198:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800219c:	20002798 	.word	0x20002798

080021a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC1_2_IRQHandler>
	...

080021a4 <__libc_init_array>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	4e0d      	ldr	r6, [pc, #52]	; (80021dc <__libc_init_array+0x38>)
 80021a8:	4c0d      	ldr	r4, [pc, #52]	; (80021e0 <__libc_init_array+0x3c>)
 80021aa:	1ba4      	subs	r4, r4, r6
 80021ac:	10a4      	asrs	r4, r4, #2
 80021ae:	2500      	movs	r5, #0
 80021b0:	42a5      	cmp	r5, r4
 80021b2:	d109      	bne.n	80021c8 <__libc_init_array+0x24>
 80021b4:	4e0b      	ldr	r6, [pc, #44]	; (80021e4 <__libc_init_array+0x40>)
 80021b6:	4c0c      	ldr	r4, [pc, #48]	; (80021e8 <__libc_init_array+0x44>)
 80021b8:	f000 fc4c 	bl	8002a54 <_init>
 80021bc:	1ba4      	subs	r4, r4, r6
 80021be:	10a4      	asrs	r4, r4, #2
 80021c0:	2500      	movs	r5, #0
 80021c2:	42a5      	cmp	r5, r4
 80021c4:	d105      	bne.n	80021d2 <__libc_init_array+0x2e>
 80021c6:	bd70      	pop	{r4, r5, r6, pc}
 80021c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021cc:	4798      	blx	r3
 80021ce:	3501      	adds	r5, #1
 80021d0:	e7ee      	b.n	80021b0 <__libc_init_array+0xc>
 80021d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021d6:	4798      	blx	r3
 80021d8:	3501      	adds	r5, #1
 80021da:	e7f2      	b.n	80021c2 <__libc_init_array+0x1e>
 80021dc:	08002ae8 	.word	0x08002ae8
 80021e0:	08002ae8 	.word	0x08002ae8
 80021e4:	08002ae8 	.word	0x08002ae8
 80021e8:	08002aec 	.word	0x08002aec

080021ec <memset>:
 80021ec:	4402      	add	r2, r0
 80021ee:	4603      	mov	r3, r0
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d100      	bne.n	80021f6 <memset+0xa>
 80021f4:	4770      	bx	lr
 80021f6:	f803 1b01 	strb.w	r1, [r3], #1
 80021fa:	e7f9      	b.n	80021f0 <memset+0x4>

080021fc <siprintf>:
 80021fc:	b40e      	push	{r1, r2, r3}
 80021fe:	b500      	push	{lr}
 8002200:	b09c      	sub	sp, #112	; 0x70
 8002202:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002206:	ab1d      	add	r3, sp, #116	; 0x74
 8002208:	f8ad 1014 	strh.w	r1, [sp, #20]
 800220c:	9002      	str	r0, [sp, #8]
 800220e:	9006      	str	r0, [sp, #24]
 8002210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <siprintf+0x44>)
 8002216:	9104      	str	r1, [sp, #16]
 8002218:	9107      	str	r1, [sp, #28]
 800221a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800221e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002222:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002226:	6800      	ldr	r0, [r0, #0]
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	a902      	add	r1, sp, #8
 800222c:	f000 f866 	bl	80022fc <_svfiprintf_r>
 8002230:	9b02      	ldr	r3, [sp, #8]
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
 8002236:	b01c      	add	sp, #112	; 0x70
 8002238:	f85d eb04 	ldr.w	lr, [sp], #4
 800223c:	b003      	add	sp, #12
 800223e:	4770      	bx	lr
 8002240:	2000000c 	.word	0x2000000c

08002244 <__ssputs_r>:
 8002244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002248:	688e      	ldr	r6, [r1, #8]
 800224a:	429e      	cmp	r6, r3
 800224c:	4682      	mov	sl, r0
 800224e:	460c      	mov	r4, r1
 8002250:	4691      	mov	r9, r2
 8002252:	4698      	mov	r8, r3
 8002254:	d835      	bhi.n	80022c2 <__ssputs_r+0x7e>
 8002256:	898a      	ldrh	r2, [r1, #12]
 8002258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800225c:	d031      	beq.n	80022c2 <__ssputs_r+0x7e>
 800225e:	6825      	ldr	r5, [r4, #0]
 8002260:	6909      	ldr	r1, [r1, #16]
 8002262:	1a6f      	subs	r7, r5, r1
 8002264:	6965      	ldr	r5, [r4, #20]
 8002266:	2302      	movs	r3, #2
 8002268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800226c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002270:	f108 0301 	add.w	r3, r8, #1
 8002274:	443b      	add	r3, r7
 8002276:	429d      	cmp	r5, r3
 8002278:	bf38      	it	cc
 800227a:	461d      	movcc	r5, r3
 800227c:	0553      	lsls	r3, r2, #21
 800227e:	d531      	bpl.n	80022e4 <__ssputs_r+0xa0>
 8002280:	4629      	mov	r1, r5
 8002282:	f000 fb39 	bl	80028f8 <_malloc_r>
 8002286:	4606      	mov	r6, r0
 8002288:	b950      	cbnz	r0, 80022a0 <__ssputs_r+0x5c>
 800228a:	230c      	movs	r3, #12
 800228c:	f8ca 3000 	str.w	r3, [sl]
 8002290:	89a3      	ldrh	r3, [r4, #12]
 8002292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002296:	81a3      	strh	r3, [r4, #12]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a0:	463a      	mov	r2, r7
 80022a2:	6921      	ldr	r1, [r4, #16]
 80022a4:	f000 fab4 	bl	8002810 <memcpy>
 80022a8:	89a3      	ldrh	r3, [r4, #12]
 80022aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80022ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b2:	81a3      	strh	r3, [r4, #12]
 80022b4:	6126      	str	r6, [r4, #16]
 80022b6:	6165      	str	r5, [r4, #20]
 80022b8:	443e      	add	r6, r7
 80022ba:	1bed      	subs	r5, r5, r7
 80022bc:	6026      	str	r6, [r4, #0]
 80022be:	60a5      	str	r5, [r4, #8]
 80022c0:	4646      	mov	r6, r8
 80022c2:	4546      	cmp	r6, r8
 80022c4:	bf28      	it	cs
 80022c6:	4646      	movcs	r6, r8
 80022c8:	4632      	mov	r2, r6
 80022ca:	4649      	mov	r1, r9
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	f000 faaa 	bl	8002826 <memmove>
 80022d2:	68a3      	ldr	r3, [r4, #8]
 80022d4:	1b9b      	subs	r3, r3, r6
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	6823      	ldr	r3, [r4, #0]
 80022da:	441e      	add	r6, r3
 80022dc:	6026      	str	r6, [r4, #0]
 80022de:	2000      	movs	r0, #0
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022e4:	462a      	mov	r2, r5
 80022e6:	f000 fb65 	bl	80029b4 <_realloc_r>
 80022ea:	4606      	mov	r6, r0
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d1e1      	bne.n	80022b4 <__ssputs_r+0x70>
 80022f0:	6921      	ldr	r1, [r4, #16]
 80022f2:	4650      	mov	r0, sl
 80022f4:	f000 fab2 	bl	800285c <_free_r>
 80022f8:	e7c7      	b.n	800228a <__ssputs_r+0x46>
	...

080022fc <_svfiprintf_r>:
 80022fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002300:	b09d      	sub	sp, #116	; 0x74
 8002302:	4680      	mov	r8, r0
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	898b      	ldrh	r3, [r1, #12]
 8002308:	061c      	lsls	r4, r3, #24
 800230a:	460d      	mov	r5, r1
 800230c:	4616      	mov	r6, r2
 800230e:	d50f      	bpl.n	8002330 <_svfiprintf_r+0x34>
 8002310:	690b      	ldr	r3, [r1, #16]
 8002312:	b96b      	cbnz	r3, 8002330 <_svfiprintf_r+0x34>
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	f000 faef 	bl	80028f8 <_malloc_r>
 800231a:	6028      	str	r0, [r5, #0]
 800231c:	6128      	str	r0, [r5, #16]
 800231e:	b928      	cbnz	r0, 800232c <_svfiprintf_r+0x30>
 8002320:	230c      	movs	r3, #12
 8002322:	f8c8 3000 	str.w	r3, [r8]
 8002326:	f04f 30ff 	mov.w	r0, #4294967295
 800232a:	e0c5      	b.n	80024b8 <_svfiprintf_r+0x1bc>
 800232c:	2340      	movs	r3, #64	; 0x40
 800232e:	616b      	str	r3, [r5, #20]
 8002330:	2300      	movs	r3, #0
 8002332:	9309      	str	r3, [sp, #36]	; 0x24
 8002334:	2320      	movs	r3, #32
 8002336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800233a:	2330      	movs	r3, #48	; 0x30
 800233c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002340:	f04f 0b01 	mov.w	fp, #1
 8002344:	4637      	mov	r7, r6
 8002346:	463c      	mov	r4, r7
 8002348:	f814 3b01 	ldrb.w	r3, [r4], #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d13c      	bne.n	80023ca <_svfiprintf_r+0xce>
 8002350:	ebb7 0a06 	subs.w	sl, r7, r6
 8002354:	d00b      	beq.n	800236e <_svfiprintf_r+0x72>
 8002356:	4653      	mov	r3, sl
 8002358:	4632      	mov	r2, r6
 800235a:	4629      	mov	r1, r5
 800235c:	4640      	mov	r0, r8
 800235e:	f7ff ff71 	bl	8002244 <__ssputs_r>
 8002362:	3001      	adds	r0, #1
 8002364:	f000 80a3 	beq.w	80024ae <_svfiprintf_r+0x1b2>
 8002368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800236a:	4453      	add	r3, sl
 800236c:	9309      	str	r3, [sp, #36]	; 0x24
 800236e:	783b      	ldrb	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 809c 	beq.w	80024ae <_svfiprintf_r+0x1b2>
 8002376:	2300      	movs	r3, #0
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	9304      	str	r3, [sp, #16]
 800237e:	9307      	str	r3, [sp, #28]
 8002380:	9205      	str	r2, [sp, #20]
 8002382:	9306      	str	r3, [sp, #24]
 8002384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002388:	931a      	str	r3, [sp, #104]	; 0x68
 800238a:	2205      	movs	r2, #5
 800238c:	7821      	ldrb	r1, [r4, #0]
 800238e:	4850      	ldr	r0, [pc, #320]	; (80024d0 <_svfiprintf_r+0x1d4>)
 8002390:	f7fd ff1e 	bl	80001d0 <memchr>
 8002394:	1c67      	adds	r7, r4, #1
 8002396:	9b04      	ldr	r3, [sp, #16]
 8002398:	b9d8      	cbnz	r0, 80023d2 <_svfiprintf_r+0xd6>
 800239a:	06d9      	lsls	r1, r3, #27
 800239c:	bf44      	itt	mi
 800239e:	2220      	movmi	r2, #32
 80023a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023a4:	071a      	lsls	r2, r3, #28
 80023a6:	bf44      	itt	mi
 80023a8:	222b      	movmi	r2, #43	; 0x2b
 80023aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80023ae:	7822      	ldrb	r2, [r4, #0]
 80023b0:	2a2a      	cmp	r2, #42	; 0x2a
 80023b2:	d016      	beq.n	80023e2 <_svfiprintf_r+0xe6>
 80023b4:	9a07      	ldr	r2, [sp, #28]
 80023b6:	2100      	movs	r1, #0
 80023b8:	200a      	movs	r0, #10
 80023ba:	4627      	mov	r7, r4
 80023bc:	3401      	adds	r4, #1
 80023be:	783b      	ldrb	r3, [r7, #0]
 80023c0:	3b30      	subs	r3, #48	; 0x30
 80023c2:	2b09      	cmp	r3, #9
 80023c4:	d951      	bls.n	800246a <_svfiprintf_r+0x16e>
 80023c6:	b1c9      	cbz	r1, 80023fc <_svfiprintf_r+0x100>
 80023c8:	e011      	b.n	80023ee <_svfiprintf_r+0xf2>
 80023ca:	2b25      	cmp	r3, #37	; 0x25
 80023cc:	d0c0      	beq.n	8002350 <_svfiprintf_r+0x54>
 80023ce:	4627      	mov	r7, r4
 80023d0:	e7b9      	b.n	8002346 <_svfiprintf_r+0x4a>
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <_svfiprintf_r+0x1d4>)
 80023d4:	1a80      	subs	r0, r0, r2
 80023d6:	fa0b f000 	lsl.w	r0, fp, r0
 80023da:	4318      	orrs	r0, r3
 80023dc:	9004      	str	r0, [sp, #16]
 80023de:	463c      	mov	r4, r7
 80023e0:	e7d3      	b.n	800238a <_svfiprintf_r+0x8e>
 80023e2:	9a03      	ldr	r2, [sp, #12]
 80023e4:	1d11      	adds	r1, r2, #4
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	9103      	str	r1, [sp, #12]
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	db01      	blt.n	80023f2 <_svfiprintf_r+0xf6>
 80023ee:	9207      	str	r2, [sp, #28]
 80023f0:	e004      	b.n	80023fc <_svfiprintf_r+0x100>
 80023f2:	4252      	negs	r2, r2
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	9207      	str	r2, [sp, #28]
 80023fa:	9304      	str	r3, [sp, #16]
 80023fc:	783b      	ldrb	r3, [r7, #0]
 80023fe:	2b2e      	cmp	r3, #46	; 0x2e
 8002400:	d10e      	bne.n	8002420 <_svfiprintf_r+0x124>
 8002402:	787b      	ldrb	r3, [r7, #1]
 8002404:	2b2a      	cmp	r3, #42	; 0x2a
 8002406:	f107 0101 	add.w	r1, r7, #1
 800240a:	d132      	bne.n	8002472 <_svfiprintf_r+0x176>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	1d1a      	adds	r2, r3, #4
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	9203      	str	r2, [sp, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	bfb8      	it	lt
 8002418:	f04f 33ff 	movlt.w	r3, #4294967295
 800241c:	3702      	adds	r7, #2
 800241e:	9305      	str	r3, [sp, #20]
 8002420:	4c2c      	ldr	r4, [pc, #176]	; (80024d4 <_svfiprintf_r+0x1d8>)
 8002422:	7839      	ldrb	r1, [r7, #0]
 8002424:	2203      	movs	r2, #3
 8002426:	4620      	mov	r0, r4
 8002428:	f7fd fed2 	bl	80001d0 <memchr>
 800242c:	b138      	cbz	r0, 800243e <_svfiprintf_r+0x142>
 800242e:	2340      	movs	r3, #64	; 0x40
 8002430:	1b00      	subs	r0, r0, r4
 8002432:	fa03 f000 	lsl.w	r0, r3, r0
 8002436:	9b04      	ldr	r3, [sp, #16]
 8002438:	4303      	orrs	r3, r0
 800243a:	9304      	str	r3, [sp, #16]
 800243c:	3701      	adds	r7, #1
 800243e:	7839      	ldrb	r1, [r7, #0]
 8002440:	4825      	ldr	r0, [pc, #148]	; (80024d8 <_svfiprintf_r+0x1dc>)
 8002442:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002446:	2206      	movs	r2, #6
 8002448:	1c7e      	adds	r6, r7, #1
 800244a:	f7fd fec1 	bl	80001d0 <memchr>
 800244e:	2800      	cmp	r0, #0
 8002450:	d035      	beq.n	80024be <_svfiprintf_r+0x1c2>
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <_svfiprintf_r+0x1e0>)
 8002454:	b9fb      	cbnz	r3, 8002496 <_svfiprintf_r+0x19a>
 8002456:	9b03      	ldr	r3, [sp, #12]
 8002458:	3307      	adds	r3, #7
 800245a:	f023 0307 	bic.w	r3, r3, #7
 800245e:	3308      	adds	r3, #8
 8002460:	9303      	str	r3, [sp, #12]
 8002462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002464:	444b      	add	r3, r9
 8002466:	9309      	str	r3, [sp, #36]	; 0x24
 8002468:	e76c      	b.n	8002344 <_svfiprintf_r+0x48>
 800246a:	fb00 3202 	mla	r2, r0, r2, r3
 800246e:	2101      	movs	r1, #1
 8002470:	e7a3      	b.n	80023ba <_svfiprintf_r+0xbe>
 8002472:	2300      	movs	r3, #0
 8002474:	9305      	str	r3, [sp, #20]
 8002476:	4618      	mov	r0, r3
 8002478:	240a      	movs	r4, #10
 800247a:	460f      	mov	r7, r1
 800247c:	3101      	adds	r1, #1
 800247e:	783a      	ldrb	r2, [r7, #0]
 8002480:	3a30      	subs	r2, #48	; 0x30
 8002482:	2a09      	cmp	r2, #9
 8002484:	d903      	bls.n	800248e <_svfiprintf_r+0x192>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ca      	beq.n	8002420 <_svfiprintf_r+0x124>
 800248a:	9005      	str	r0, [sp, #20]
 800248c:	e7c8      	b.n	8002420 <_svfiprintf_r+0x124>
 800248e:	fb04 2000 	mla	r0, r4, r0, r2
 8002492:	2301      	movs	r3, #1
 8002494:	e7f1      	b.n	800247a <_svfiprintf_r+0x17e>
 8002496:	ab03      	add	r3, sp, #12
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	462a      	mov	r2, r5
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <_svfiprintf_r+0x1e4>)
 800249e:	a904      	add	r1, sp, #16
 80024a0:	4640      	mov	r0, r8
 80024a2:	f3af 8000 	nop.w
 80024a6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80024aa:	4681      	mov	r9, r0
 80024ac:	d1d9      	bne.n	8002462 <_svfiprintf_r+0x166>
 80024ae:	89ab      	ldrh	r3, [r5, #12]
 80024b0:	065b      	lsls	r3, r3, #25
 80024b2:	f53f af38 	bmi.w	8002326 <_svfiprintf_r+0x2a>
 80024b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024b8:	b01d      	add	sp, #116	; 0x74
 80024ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024be:	ab03      	add	r3, sp, #12
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	462a      	mov	r2, r5
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <_svfiprintf_r+0x1e4>)
 80024c6:	a904      	add	r1, sp, #16
 80024c8:	4640      	mov	r0, r8
 80024ca:	f000 f881 	bl	80025d0 <_printf_i>
 80024ce:	e7ea      	b.n	80024a6 <_svfiprintf_r+0x1aa>
 80024d0:	08002ab3 	.word	0x08002ab3
 80024d4:	08002ab9 	.word	0x08002ab9
 80024d8:	08002abd 	.word	0x08002abd
 80024dc:	00000000 	.word	0x00000000
 80024e0:	08002245 	.word	0x08002245

080024e4 <_printf_common>:
 80024e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024e8:	4691      	mov	r9, r2
 80024ea:	461f      	mov	r7, r3
 80024ec:	688a      	ldr	r2, [r1, #8]
 80024ee:	690b      	ldr	r3, [r1, #16]
 80024f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bfb8      	it	lt
 80024f8:	4613      	movlt	r3, r2
 80024fa:	f8c9 3000 	str.w	r3, [r9]
 80024fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002502:	4606      	mov	r6, r0
 8002504:	460c      	mov	r4, r1
 8002506:	b112      	cbz	r2, 800250e <_printf_common+0x2a>
 8002508:	3301      	adds	r3, #1
 800250a:	f8c9 3000 	str.w	r3, [r9]
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	0699      	lsls	r1, r3, #26
 8002512:	bf42      	ittt	mi
 8002514:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002518:	3302      	addmi	r3, #2
 800251a:	f8c9 3000 	strmi.w	r3, [r9]
 800251e:	6825      	ldr	r5, [r4, #0]
 8002520:	f015 0506 	ands.w	r5, r5, #6
 8002524:	d107      	bne.n	8002536 <_printf_common+0x52>
 8002526:	f104 0a19 	add.w	sl, r4, #25
 800252a:	68e3      	ldr	r3, [r4, #12]
 800252c:	f8d9 2000 	ldr.w	r2, [r9]
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	429d      	cmp	r5, r3
 8002534:	db29      	blt.n	800258a <_printf_common+0xa6>
 8002536:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800253a:	6822      	ldr	r2, [r4, #0]
 800253c:	3300      	adds	r3, #0
 800253e:	bf18      	it	ne
 8002540:	2301      	movne	r3, #1
 8002542:	0692      	lsls	r2, r2, #26
 8002544:	d42e      	bmi.n	80025a4 <_printf_common+0xc0>
 8002546:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800254a:	4639      	mov	r1, r7
 800254c:	4630      	mov	r0, r6
 800254e:	47c0      	blx	r8
 8002550:	3001      	adds	r0, #1
 8002552:	d021      	beq.n	8002598 <_printf_common+0xb4>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	68e5      	ldr	r5, [r4, #12]
 8002558:	f8d9 2000 	ldr.w	r2, [r9]
 800255c:	f003 0306 	and.w	r3, r3, #6
 8002560:	2b04      	cmp	r3, #4
 8002562:	bf08      	it	eq
 8002564:	1aad      	subeq	r5, r5, r2
 8002566:	68a3      	ldr	r3, [r4, #8]
 8002568:	6922      	ldr	r2, [r4, #16]
 800256a:	bf0c      	ite	eq
 800256c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002570:	2500      	movne	r5, #0
 8002572:	4293      	cmp	r3, r2
 8002574:	bfc4      	itt	gt
 8002576:	1a9b      	subgt	r3, r3, r2
 8002578:	18ed      	addgt	r5, r5, r3
 800257a:	f04f 0900 	mov.w	r9, #0
 800257e:	341a      	adds	r4, #26
 8002580:	454d      	cmp	r5, r9
 8002582:	d11b      	bne.n	80025bc <_printf_common+0xd8>
 8002584:	2000      	movs	r0, #0
 8002586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800258a:	2301      	movs	r3, #1
 800258c:	4652      	mov	r2, sl
 800258e:	4639      	mov	r1, r7
 8002590:	4630      	mov	r0, r6
 8002592:	47c0      	blx	r8
 8002594:	3001      	adds	r0, #1
 8002596:	d103      	bne.n	80025a0 <_printf_common+0xbc>
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a0:	3501      	adds	r5, #1
 80025a2:	e7c2      	b.n	800252a <_printf_common+0x46>
 80025a4:	18e1      	adds	r1, r4, r3
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	2030      	movs	r0, #48	; 0x30
 80025aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ae:	4422      	add	r2, r4
 80025b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025b8:	3302      	adds	r3, #2
 80025ba:	e7c4      	b.n	8002546 <_printf_common+0x62>
 80025bc:	2301      	movs	r3, #1
 80025be:	4622      	mov	r2, r4
 80025c0:	4639      	mov	r1, r7
 80025c2:	4630      	mov	r0, r6
 80025c4:	47c0      	blx	r8
 80025c6:	3001      	adds	r0, #1
 80025c8:	d0e6      	beq.n	8002598 <_printf_common+0xb4>
 80025ca:	f109 0901 	add.w	r9, r9, #1
 80025ce:	e7d7      	b.n	8002580 <_printf_common+0x9c>

080025d0 <_printf_i>:
 80025d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d4:	4617      	mov	r7, r2
 80025d6:	7e0a      	ldrb	r2, [r1, #24]
 80025d8:	b085      	sub	sp, #20
 80025da:	2a6e      	cmp	r2, #110	; 0x6e
 80025dc:	4698      	mov	r8, r3
 80025de:	4606      	mov	r6, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80025e4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80025e8:	f000 80bc 	beq.w	8002764 <_printf_i+0x194>
 80025ec:	d81a      	bhi.n	8002624 <_printf_i+0x54>
 80025ee:	2a63      	cmp	r2, #99	; 0x63
 80025f0:	d02e      	beq.n	8002650 <_printf_i+0x80>
 80025f2:	d80a      	bhi.n	800260a <_printf_i+0x3a>
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	f000 80c8 	beq.w	800278a <_printf_i+0x1ba>
 80025fa:	2a58      	cmp	r2, #88	; 0x58
 80025fc:	f000 808a 	beq.w	8002714 <_printf_i+0x144>
 8002600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002604:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002608:	e02a      	b.n	8002660 <_printf_i+0x90>
 800260a:	2a64      	cmp	r2, #100	; 0x64
 800260c:	d001      	beq.n	8002612 <_printf_i+0x42>
 800260e:	2a69      	cmp	r2, #105	; 0x69
 8002610:	d1f6      	bne.n	8002600 <_printf_i+0x30>
 8002612:	6821      	ldr	r1, [r4, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f011 0f80 	tst.w	r1, #128	; 0x80
 800261a:	d023      	beq.n	8002664 <_printf_i+0x94>
 800261c:	1d11      	adds	r1, r2, #4
 800261e:	6019      	str	r1, [r3, #0]
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	e027      	b.n	8002674 <_printf_i+0xa4>
 8002624:	2a73      	cmp	r2, #115	; 0x73
 8002626:	f000 80b4 	beq.w	8002792 <_printf_i+0x1c2>
 800262a:	d808      	bhi.n	800263e <_printf_i+0x6e>
 800262c:	2a6f      	cmp	r2, #111	; 0x6f
 800262e:	d02a      	beq.n	8002686 <_printf_i+0xb6>
 8002630:	2a70      	cmp	r2, #112	; 0x70
 8002632:	d1e5      	bne.n	8002600 <_printf_i+0x30>
 8002634:	680a      	ldr	r2, [r1, #0]
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	600a      	str	r2, [r1, #0]
 800263c:	e003      	b.n	8002646 <_printf_i+0x76>
 800263e:	2a75      	cmp	r2, #117	; 0x75
 8002640:	d021      	beq.n	8002686 <_printf_i+0xb6>
 8002642:	2a78      	cmp	r2, #120	; 0x78
 8002644:	d1dc      	bne.n	8002600 <_printf_i+0x30>
 8002646:	2278      	movs	r2, #120	; 0x78
 8002648:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800264c:	496e      	ldr	r1, [pc, #440]	; (8002808 <_printf_i+0x238>)
 800264e:	e064      	b.n	800271a <_printf_i+0x14a>
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002656:	1d11      	adds	r1, r2, #4
 8002658:	6019      	str	r1, [r3, #0]
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002660:	2301      	movs	r3, #1
 8002662:	e0a3      	b.n	80027ac <_printf_i+0x1dc>
 8002664:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002668:	f102 0104 	add.w	r1, r2, #4
 800266c:	6019      	str	r1, [r3, #0]
 800266e:	d0d7      	beq.n	8002620 <_printf_i+0x50>
 8002670:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002674:	2b00      	cmp	r3, #0
 8002676:	da03      	bge.n	8002680 <_printf_i+0xb0>
 8002678:	222d      	movs	r2, #45	; 0x2d
 800267a:	425b      	negs	r3, r3
 800267c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002680:	4962      	ldr	r1, [pc, #392]	; (800280c <_printf_i+0x23c>)
 8002682:	220a      	movs	r2, #10
 8002684:	e017      	b.n	80026b6 <_printf_i+0xe6>
 8002686:	6820      	ldr	r0, [r4, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800268e:	d003      	beq.n	8002698 <_printf_i+0xc8>
 8002690:	1d08      	adds	r0, r1, #4
 8002692:	6018      	str	r0, [r3, #0]
 8002694:	680b      	ldr	r3, [r1, #0]
 8002696:	e006      	b.n	80026a6 <_printf_i+0xd6>
 8002698:	f010 0f40 	tst.w	r0, #64	; 0x40
 800269c:	f101 0004 	add.w	r0, r1, #4
 80026a0:	6018      	str	r0, [r3, #0]
 80026a2:	d0f7      	beq.n	8002694 <_printf_i+0xc4>
 80026a4:	880b      	ldrh	r3, [r1, #0]
 80026a6:	4959      	ldr	r1, [pc, #356]	; (800280c <_printf_i+0x23c>)
 80026a8:	2a6f      	cmp	r2, #111	; 0x6f
 80026aa:	bf14      	ite	ne
 80026ac:	220a      	movne	r2, #10
 80026ae:	2208      	moveq	r2, #8
 80026b0:	2000      	movs	r0, #0
 80026b2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80026b6:	6865      	ldr	r5, [r4, #4]
 80026b8:	60a5      	str	r5, [r4, #8]
 80026ba:	2d00      	cmp	r5, #0
 80026bc:	f2c0 809c 	blt.w	80027f8 <_printf_i+0x228>
 80026c0:	6820      	ldr	r0, [r4, #0]
 80026c2:	f020 0004 	bic.w	r0, r0, #4
 80026c6:	6020      	str	r0, [r4, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d13f      	bne.n	800274c <_printf_i+0x17c>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	f040 8095 	bne.w	80027fc <_printf_i+0x22c>
 80026d2:	4675      	mov	r5, lr
 80026d4:	2a08      	cmp	r2, #8
 80026d6:	d10b      	bne.n	80026f0 <_printf_i+0x120>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	07da      	lsls	r2, r3, #31
 80026dc:	d508      	bpl.n	80026f0 <_printf_i+0x120>
 80026de:	6923      	ldr	r3, [r4, #16]
 80026e0:	6862      	ldr	r2, [r4, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	bfde      	ittt	le
 80026e6:	2330      	movle	r3, #48	; 0x30
 80026e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026f0:	ebae 0305 	sub.w	r3, lr, r5
 80026f4:	6123      	str	r3, [r4, #16]
 80026f6:	f8cd 8000 	str.w	r8, [sp]
 80026fa:	463b      	mov	r3, r7
 80026fc:	aa03      	add	r2, sp, #12
 80026fe:	4621      	mov	r1, r4
 8002700:	4630      	mov	r0, r6
 8002702:	f7ff feef 	bl	80024e4 <_printf_common>
 8002706:	3001      	adds	r0, #1
 8002708:	d155      	bne.n	80027b6 <_printf_i+0x1e6>
 800270a:	f04f 30ff 	mov.w	r0, #4294967295
 800270e:	b005      	add	sp, #20
 8002710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002714:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002718:	493c      	ldr	r1, [pc, #240]	; (800280c <_printf_i+0x23c>)
 800271a:	6822      	ldr	r2, [r4, #0]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002722:	f100 0504 	add.w	r5, r0, #4
 8002726:	601d      	str	r5, [r3, #0]
 8002728:	d001      	beq.n	800272e <_printf_i+0x15e>
 800272a:	6803      	ldr	r3, [r0, #0]
 800272c:	e002      	b.n	8002734 <_printf_i+0x164>
 800272e:	0655      	lsls	r5, r2, #25
 8002730:	d5fb      	bpl.n	800272a <_printf_i+0x15a>
 8002732:	8803      	ldrh	r3, [r0, #0]
 8002734:	07d0      	lsls	r0, r2, #31
 8002736:	bf44      	itt	mi
 8002738:	f042 0220 	orrmi.w	r2, r2, #32
 800273c:	6022      	strmi	r2, [r4, #0]
 800273e:	b91b      	cbnz	r3, 8002748 <_printf_i+0x178>
 8002740:	6822      	ldr	r2, [r4, #0]
 8002742:	f022 0220 	bic.w	r2, r2, #32
 8002746:	6022      	str	r2, [r4, #0]
 8002748:	2210      	movs	r2, #16
 800274a:	e7b1      	b.n	80026b0 <_printf_i+0xe0>
 800274c:	4675      	mov	r5, lr
 800274e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002752:	fb02 3310 	mls	r3, r2, r0, r3
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800275c:	4603      	mov	r3, r0
 800275e:	2800      	cmp	r0, #0
 8002760:	d1f5      	bne.n	800274e <_printf_i+0x17e>
 8002762:	e7b7      	b.n	80026d4 <_printf_i+0x104>
 8002764:	6808      	ldr	r0, [r1, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	6949      	ldr	r1, [r1, #20]
 800276a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800276e:	d004      	beq.n	800277a <_printf_i+0x1aa>
 8002770:	1d10      	adds	r0, r2, #4
 8002772:	6018      	str	r0, [r3, #0]
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	6019      	str	r1, [r3, #0]
 8002778:	e007      	b.n	800278a <_printf_i+0x1ba>
 800277a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800277e:	f102 0004 	add.w	r0, r2, #4
 8002782:	6018      	str	r0, [r3, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	d0f6      	beq.n	8002776 <_printf_i+0x1a6>
 8002788:	8019      	strh	r1, [r3, #0]
 800278a:	2300      	movs	r3, #0
 800278c:	6123      	str	r3, [r4, #16]
 800278e:	4675      	mov	r5, lr
 8002790:	e7b1      	b.n	80026f6 <_printf_i+0x126>
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	1d11      	adds	r1, r2, #4
 8002796:	6019      	str	r1, [r3, #0]
 8002798:	6815      	ldr	r5, [r2, #0]
 800279a:	6862      	ldr	r2, [r4, #4]
 800279c:	2100      	movs	r1, #0
 800279e:	4628      	mov	r0, r5
 80027a0:	f7fd fd16 	bl	80001d0 <memchr>
 80027a4:	b108      	cbz	r0, 80027aa <_printf_i+0x1da>
 80027a6:	1b40      	subs	r0, r0, r5
 80027a8:	6060      	str	r0, [r4, #4]
 80027aa:	6863      	ldr	r3, [r4, #4]
 80027ac:	6123      	str	r3, [r4, #16]
 80027ae:	2300      	movs	r3, #0
 80027b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027b4:	e79f      	b.n	80026f6 <_printf_i+0x126>
 80027b6:	6923      	ldr	r3, [r4, #16]
 80027b8:	462a      	mov	r2, r5
 80027ba:	4639      	mov	r1, r7
 80027bc:	4630      	mov	r0, r6
 80027be:	47c0      	blx	r8
 80027c0:	3001      	adds	r0, #1
 80027c2:	d0a2      	beq.n	800270a <_printf_i+0x13a>
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	079b      	lsls	r3, r3, #30
 80027c8:	d507      	bpl.n	80027da <_printf_i+0x20a>
 80027ca:	2500      	movs	r5, #0
 80027cc:	f104 0919 	add.w	r9, r4, #25
 80027d0:	68e3      	ldr	r3, [r4, #12]
 80027d2:	9a03      	ldr	r2, [sp, #12]
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	429d      	cmp	r5, r3
 80027d8:	db05      	blt.n	80027e6 <_printf_i+0x216>
 80027da:	68e0      	ldr	r0, [r4, #12]
 80027dc:	9b03      	ldr	r3, [sp, #12]
 80027de:	4298      	cmp	r0, r3
 80027e0:	bfb8      	it	lt
 80027e2:	4618      	movlt	r0, r3
 80027e4:	e793      	b.n	800270e <_printf_i+0x13e>
 80027e6:	2301      	movs	r3, #1
 80027e8:	464a      	mov	r2, r9
 80027ea:	4639      	mov	r1, r7
 80027ec:	4630      	mov	r0, r6
 80027ee:	47c0      	blx	r8
 80027f0:	3001      	adds	r0, #1
 80027f2:	d08a      	beq.n	800270a <_printf_i+0x13a>
 80027f4:	3501      	adds	r5, #1
 80027f6:	e7eb      	b.n	80027d0 <_printf_i+0x200>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1a7      	bne.n	800274c <_printf_i+0x17c>
 80027fc:	780b      	ldrb	r3, [r1, #0]
 80027fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002806:	e765      	b.n	80026d4 <_printf_i+0x104>
 8002808:	08002ad5 	.word	0x08002ad5
 800280c:	08002ac4 	.word	0x08002ac4

08002810 <memcpy>:
 8002810:	b510      	push	{r4, lr}
 8002812:	1e43      	subs	r3, r0, #1
 8002814:	440a      	add	r2, r1
 8002816:	4291      	cmp	r1, r2
 8002818:	d100      	bne.n	800281c <memcpy+0xc>
 800281a:	bd10      	pop	{r4, pc}
 800281c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002820:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002824:	e7f7      	b.n	8002816 <memcpy+0x6>

08002826 <memmove>:
 8002826:	4288      	cmp	r0, r1
 8002828:	b510      	push	{r4, lr}
 800282a:	eb01 0302 	add.w	r3, r1, r2
 800282e:	d803      	bhi.n	8002838 <memmove+0x12>
 8002830:	1e42      	subs	r2, r0, #1
 8002832:	4299      	cmp	r1, r3
 8002834:	d10c      	bne.n	8002850 <memmove+0x2a>
 8002836:	bd10      	pop	{r4, pc}
 8002838:	4298      	cmp	r0, r3
 800283a:	d2f9      	bcs.n	8002830 <memmove+0xa>
 800283c:	1881      	adds	r1, r0, r2
 800283e:	1ad2      	subs	r2, r2, r3
 8002840:	42d3      	cmn	r3, r2
 8002842:	d100      	bne.n	8002846 <memmove+0x20>
 8002844:	bd10      	pop	{r4, pc}
 8002846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800284a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800284e:	e7f7      	b.n	8002840 <memmove+0x1a>
 8002850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002854:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002858:	e7eb      	b.n	8002832 <memmove+0xc>
	...

0800285c <_free_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4605      	mov	r5, r0
 8002860:	2900      	cmp	r1, #0
 8002862:	d045      	beq.n	80028f0 <_free_r+0x94>
 8002864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002868:	1f0c      	subs	r4, r1, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	bfb8      	it	lt
 800286e:	18e4      	addlt	r4, r4, r3
 8002870:	f000 f8d6 	bl	8002a20 <__malloc_lock>
 8002874:	4a1f      	ldr	r2, [pc, #124]	; (80028f4 <_free_r+0x98>)
 8002876:	6813      	ldr	r3, [r2, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	b933      	cbnz	r3, 800288a <_free_r+0x2e>
 800287c:	6063      	str	r3, [r4, #4]
 800287e:	6014      	str	r4, [r2, #0]
 8002880:	4628      	mov	r0, r5
 8002882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002886:	f000 b8cc 	b.w	8002a22 <__malloc_unlock>
 800288a:	42a3      	cmp	r3, r4
 800288c:	d90c      	bls.n	80028a8 <_free_r+0x4c>
 800288e:	6821      	ldr	r1, [r4, #0]
 8002890:	1862      	adds	r2, r4, r1
 8002892:	4293      	cmp	r3, r2
 8002894:	bf04      	itt	eq
 8002896:	681a      	ldreq	r2, [r3, #0]
 8002898:	685b      	ldreq	r3, [r3, #4]
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	bf04      	itt	eq
 800289e:	1852      	addeq	r2, r2, r1
 80028a0:	6022      	streq	r2, [r4, #0]
 80028a2:	6004      	str	r4, [r0, #0]
 80028a4:	e7ec      	b.n	8002880 <_free_r+0x24>
 80028a6:	4613      	mov	r3, r2
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	b10a      	cbz	r2, 80028b0 <_free_r+0x54>
 80028ac:	42a2      	cmp	r2, r4
 80028ae:	d9fa      	bls.n	80028a6 <_free_r+0x4a>
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	1858      	adds	r0, r3, r1
 80028b4:	42a0      	cmp	r0, r4
 80028b6:	d10b      	bne.n	80028d0 <_free_r+0x74>
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	4401      	add	r1, r0
 80028bc:	1858      	adds	r0, r3, r1
 80028be:	4282      	cmp	r2, r0
 80028c0:	6019      	str	r1, [r3, #0]
 80028c2:	d1dd      	bne.n	8002880 <_free_r+0x24>
 80028c4:	6810      	ldr	r0, [r2, #0]
 80028c6:	6852      	ldr	r2, [r2, #4]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	4401      	add	r1, r0
 80028cc:	6019      	str	r1, [r3, #0]
 80028ce:	e7d7      	b.n	8002880 <_free_r+0x24>
 80028d0:	d902      	bls.n	80028d8 <_free_r+0x7c>
 80028d2:	230c      	movs	r3, #12
 80028d4:	602b      	str	r3, [r5, #0]
 80028d6:	e7d3      	b.n	8002880 <_free_r+0x24>
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	1821      	adds	r1, r4, r0
 80028dc:	428a      	cmp	r2, r1
 80028de:	bf04      	itt	eq
 80028e0:	6811      	ldreq	r1, [r2, #0]
 80028e2:	6852      	ldreq	r2, [r2, #4]
 80028e4:	6062      	str	r2, [r4, #4]
 80028e6:	bf04      	itt	eq
 80028e8:	1809      	addeq	r1, r1, r0
 80028ea:	6021      	streq	r1, [r4, #0]
 80028ec:	605c      	str	r4, [r3, #4]
 80028ee:	e7c7      	b.n	8002880 <_free_r+0x24>
 80028f0:	bd38      	pop	{r3, r4, r5, pc}
 80028f2:	bf00      	nop
 80028f4:	20002614 	.word	0x20002614

080028f8 <_malloc_r>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	1ccd      	adds	r5, r1, #3
 80028fc:	f025 0503 	bic.w	r5, r5, #3
 8002900:	3508      	adds	r5, #8
 8002902:	2d0c      	cmp	r5, #12
 8002904:	bf38      	it	cc
 8002906:	250c      	movcc	r5, #12
 8002908:	2d00      	cmp	r5, #0
 800290a:	4606      	mov	r6, r0
 800290c:	db01      	blt.n	8002912 <_malloc_r+0x1a>
 800290e:	42a9      	cmp	r1, r5
 8002910:	d903      	bls.n	800291a <_malloc_r+0x22>
 8002912:	230c      	movs	r3, #12
 8002914:	6033      	str	r3, [r6, #0]
 8002916:	2000      	movs	r0, #0
 8002918:	bd70      	pop	{r4, r5, r6, pc}
 800291a:	f000 f881 	bl	8002a20 <__malloc_lock>
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <_malloc_r+0xb4>)
 8002920:	6814      	ldr	r4, [r2, #0]
 8002922:	4621      	mov	r1, r4
 8002924:	b991      	cbnz	r1, 800294c <_malloc_r+0x54>
 8002926:	4c22      	ldr	r4, [pc, #136]	; (80029b0 <_malloc_r+0xb8>)
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	b91b      	cbnz	r3, 8002934 <_malloc_r+0x3c>
 800292c:	4630      	mov	r0, r6
 800292e:	f000 f867 	bl	8002a00 <_sbrk_r>
 8002932:	6020      	str	r0, [r4, #0]
 8002934:	4629      	mov	r1, r5
 8002936:	4630      	mov	r0, r6
 8002938:	f000 f862 	bl	8002a00 <_sbrk_r>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d126      	bne.n	800298e <_malloc_r+0x96>
 8002940:	230c      	movs	r3, #12
 8002942:	6033      	str	r3, [r6, #0]
 8002944:	4630      	mov	r0, r6
 8002946:	f000 f86c 	bl	8002a22 <__malloc_unlock>
 800294a:	e7e4      	b.n	8002916 <_malloc_r+0x1e>
 800294c:	680b      	ldr	r3, [r1, #0]
 800294e:	1b5b      	subs	r3, r3, r5
 8002950:	d41a      	bmi.n	8002988 <_malloc_r+0x90>
 8002952:	2b0b      	cmp	r3, #11
 8002954:	d90f      	bls.n	8002976 <_malloc_r+0x7e>
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	50cd      	str	r5, [r1, r3]
 800295a:	18cc      	adds	r4, r1, r3
 800295c:	4630      	mov	r0, r6
 800295e:	f000 f860 	bl	8002a22 <__malloc_unlock>
 8002962:	f104 000b 	add.w	r0, r4, #11
 8002966:	1d23      	adds	r3, r4, #4
 8002968:	f020 0007 	bic.w	r0, r0, #7
 800296c:	1ac3      	subs	r3, r0, r3
 800296e:	d01b      	beq.n	80029a8 <_malloc_r+0xb0>
 8002970:	425a      	negs	r2, r3
 8002972:	50e2      	str	r2, [r4, r3]
 8002974:	bd70      	pop	{r4, r5, r6, pc}
 8002976:	428c      	cmp	r4, r1
 8002978:	bf0d      	iteet	eq
 800297a:	6863      	ldreq	r3, [r4, #4]
 800297c:	684b      	ldrne	r3, [r1, #4]
 800297e:	6063      	strne	r3, [r4, #4]
 8002980:	6013      	streq	r3, [r2, #0]
 8002982:	bf18      	it	ne
 8002984:	460c      	movne	r4, r1
 8002986:	e7e9      	b.n	800295c <_malloc_r+0x64>
 8002988:	460c      	mov	r4, r1
 800298a:	6849      	ldr	r1, [r1, #4]
 800298c:	e7ca      	b.n	8002924 <_malloc_r+0x2c>
 800298e:	1cc4      	adds	r4, r0, #3
 8002990:	f024 0403 	bic.w	r4, r4, #3
 8002994:	42a0      	cmp	r0, r4
 8002996:	d005      	beq.n	80029a4 <_malloc_r+0xac>
 8002998:	1a21      	subs	r1, r4, r0
 800299a:	4630      	mov	r0, r6
 800299c:	f000 f830 	bl	8002a00 <_sbrk_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d0cd      	beq.n	8002940 <_malloc_r+0x48>
 80029a4:	6025      	str	r5, [r4, #0]
 80029a6:	e7d9      	b.n	800295c <_malloc_r+0x64>
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	bf00      	nop
 80029ac:	20002614 	.word	0x20002614
 80029b0:	20002618 	.word	0x20002618

080029b4 <_realloc_r>:
 80029b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b6:	4607      	mov	r7, r0
 80029b8:	4614      	mov	r4, r2
 80029ba:	460e      	mov	r6, r1
 80029bc:	b921      	cbnz	r1, 80029c8 <_realloc_r+0x14>
 80029be:	4611      	mov	r1, r2
 80029c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80029c4:	f7ff bf98 	b.w	80028f8 <_malloc_r>
 80029c8:	b922      	cbnz	r2, 80029d4 <_realloc_r+0x20>
 80029ca:	f7ff ff47 	bl	800285c <_free_r>
 80029ce:	4625      	mov	r5, r4
 80029d0:	4628      	mov	r0, r5
 80029d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029d4:	f000 f826 	bl	8002a24 <_malloc_usable_size_r>
 80029d8:	4284      	cmp	r4, r0
 80029da:	d90f      	bls.n	80029fc <_realloc_r+0x48>
 80029dc:	4621      	mov	r1, r4
 80029de:	4638      	mov	r0, r7
 80029e0:	f7ff ff8a 	bl	80028f8 <_malloc_r>
 80029e4:	4605      	mov	r5, r0
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d0f2      	beq.n	80029d0 <_realloc_r+0x1c>
 80029ea:	4631      	mov	r1, r6
 80029ec:	4622      	mov	r2, r4
 80029ee:	f7ff ff0f 	bl	8002810 <memcpy>
 80029f2:	4631      	mov	r1, r6
 80029f4:	4638      	mov	r0, r7
 80029f6:	f7ff ff31 	bl	800285c <_free_r>
 80029fa:	e7e9      	b.n	80029d0 <_realloc_r+0x1c>
 80029fc:	4635      	mov	r5, r6
 80029fe:	e7e7      	b.n	80029d0 <_realloc_r+0x1c>

08002a00 <_sbrk_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4c06      	ldr	r4, [pc, #24]	; (8002a1c <_sbrk_r+0x1c>)
 8002a04:	2300      	movs	r3, #0
 8002a06:	4605      	mov	r5, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	f000 f814 	bl	8002a38 <_sbrk>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d102      	bne.n	8002a1a <_sbrk_r+0x1a>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	b103      	cbz	r3, 8002a1a <_sbrk_r+0x1a>
 8002a18:	602b      	str	r3, [r5, #0]
 8002a1a:	bd38      	pop	{r3, r4, r5, pc}
 8002a1c:	20002794 	.word	0x20002794

08002a20 <__malloc_lock>:
 8002a20:	4770      	bx	lr

08002a22 <__malloc_unlock>:
 8002a22:	4770      	bx	lr

08002a24 <_malloc_usable_size_r>:
 8002a24:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	f1a0 0004 	sub.w	r0, r0, #4
 8002a2e:	bfbc      	itt	lt
 8002a30:	580b      	ldrlt	r3, [r1, r0]
 8002a32:	18c0      	addlt	r0, r0, r3
 8002a34:	4770      	bx	lr
	...

08002a38 <_sbrk>:
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <_sbrk+0x14>)
 8002a3a:	6819      	ldr	r1, [r3, #0]
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	b909      	cbnz	r1, 8002a44 <_sbrk+0xc>
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <_sbrk+0x18>)
 8002a42:	6019      	str	r1, [r3, #0]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	4402      	add	r2, r0
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	4770      	bx	lr
 8002a4c:	2000261c 	.word	0x2000261c
 8002a50:	20002798 	.word	0x20002798

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
